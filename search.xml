<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Flume的开发</title>
    <url>/2024/04/01/Flume%E7%9A%84%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="大数据相关技术学习"><a href="#大数据相关技术学习" class="headerlink" title="大数据相关技术学习"></a>大数据相关技术学习</h2><h3 id="1-flume特点和主要作用"><a href="#1-flume特点和主要作用" class="headerlink" title="1.flume特点和主要作用"></a>1.flume特点和主要作用</h3><ol>
<li>动态采集，流式处理</li>
<li>只能处理log data，（视频，音频等不能处理）</li>
<li>将本地服务器日志文件上传到hdfs（不手动上传的作用就是：实时读取）</li>
</ol>
<h3 id="2-flume的使用案例1"><a href="#2-flume的使用案例1" class="headerlink" title="2.flume的使用案例1"></a>2.flume的使用案例1</h3><ul>
<li>使用flume监听端口</li>
</ul>
<ol>
<li><p>编写配置文件</p>
<div class="highlight-container" data-rel="Coffeescript"><figure class="iseeu highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example.conf: A single-node Flume configuration</span></span><br><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line">a1.sources = r1 </span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = <span class="number">44444</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = <span class="number">1000</span></span><br><span class="line">a1.channels.c1.transactionCapacity = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>进行启动</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 第一种写法：</span><br><span class="line">[atguigu@hadoop102 flume]$ bin/flume-ng agent --conf conf/ --name </span><br><span class="line">a1 --conf-file job/flume-netcat-logger.conf -Dflume.root.logger=INFO,console</span><br><span class="line"># 第二种写法：</span><br><span class="line">[atguigu@hadoop102 flume]$ bin/flume-ng agent -c conf/ -n a1 -f </span><br><span class="line">job/flume-netcat-logger.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>借助nc开启客户端</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc localhost 44444</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>此时即可监控到传输信息，信息格式如下</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024-03-11 19:38:04,410 INFO sink.LoggerSink: Event: &#123; headers:&#123;&#125; body: 6E 69 68 61 6F 79 61                            nihaoya &#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>数据采集</tag>
        <tag>大数据技术</tag>
        <tag>Fluem</tag>
      </tags>
  </entry>
  <entry>
    <title>Java刷题技巧</title>
    <url>/2024/04/01/Java%E5%88%B7%E9%A2%98%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p>刷题网站推荐</p>
<ul>
<li><a class="link"   href="https://leetcode.cn/" >力扣 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://www.luogu.com.cn/" >洛谷 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://ac.nowcoder.com/acm/problem/list" >牛客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://codeforces.com/" >CF <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">明确各个不同网站之间的区别：如力扣的代码是核心代码模式，而牛客等就是ACM模式，内容推荐系统刷力扣，针对练习洛谷、牛客中的难题，最后也可以多打打cf比赛</span><br></pre></td></tr></table></figure></div>



<h3 id="1-Arrays-sort自定义排序规则"><a href="#1-Arrays-sort自定义排序规则" class="headerlink" title="1.Arrays.sort自定义排序规则"></a>1.<code>Arrays.sort</code>自定义排序规则</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[][] reconstructQueue(<span class="type">int</span>[][] people) &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> people.length;</span><br><span class="line">       List&lt;<span class="type">int</span>[]&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">// 自定义二维数组的排序规则： 首先按照数组的第一个元素进行从大到小排序，如果相同，按照第二元素从小到大排序</span></span><br><span class="line">       Arrays.sort(people , Comparator.comparingInt((<span class="type">int</span>[] a )-&gt; a[<span class="number">0</span>]).reversed().thenComparing(</span><br><span class="line">               (<span class="type">int</span>[] a) -&gt; a[<span class="number">1</span>]</span><br><span class="line">       ));</span><br><span class="line"></span><br><span class="line">       Arrays.sort(people, (a , b) -&gt; &#123;</span><br><span class="line">           <span class="keyword">if</span> (a[<span class="number">0</span>] == b[<span class="number">0</span>])&#123;</span><br><span class="line">               <span class="keyword">return</span> a[<span class="number">1</span>] - b[<span class="number">1</span>];</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">return</span> b[<span class="number">0</span>] - a[<span class="number">0</span>];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">       Arrays.sort(people , (a , b) -&gt; &#123;</span><br><span class="line">           <span class="keyword">if</span> (a[<span class="number">0</span>] == b[<span class="number">0</span>])&#123;</span><br><span class="line">               <span class="keyword">return</span> a[<span class="number">1</span>] - b[<span class="number">1</span>];</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">return</span> b[<span class="number">0</span>] - a[<span class="number">0</span>];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; people.length; i++) &#123;</span><br><span class="line">           System.out.println(people[i][<span class="number">0</span>] + <span class="string">&quot;:&quot;</span>+people[i][<span class="number">1</span>]);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 相当于此时已经按照身高排好序了，只需按照k进行插入即可</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span>[] person : people) &#123;</span><br><span class="line">           list.add(person[<span class="number">1</span>] , person);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> list.toArray(<span class="keyword">new</span> <span class="title class_">int</span>[people.length][]);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-大顶堆小顶堆的数组存储特点"><a href="#2-大顶堆小顶堆的数组存储特点" class="headerlink" title="2.大顶堆小顶堆的数组存储特点"></a>2.大顶堆小顶堆的数组存储特点</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 为简化计算，堆进行存储的时候数组下标也可从1开始，</span><br><span class="line">公式就调整为：父节点=i/2，左子节点=i*2，右子节点=i*2+1（i是当前节点对应的数组下标）</span><br></pre></td></tr></table></figure></div>

<p>例题：<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-6aed45fd53b4b93a6497447f57ab4b0a_720w.webp"
                     
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">代码答案如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        PriorityQueue&lt;Integer&gt; minQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a,b)-&gt;a-b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] min = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            minQueue.offer(in.nextInt());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 需要注意的是，优先队列来建立堆进行存储，要使用这个方法，不能进行手动赋值</span></span><br><span class="line">        Integer[] toArray = minQueue.toArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[n]);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : toArray) &#123;</span><br><span class="line">            min[index++] = integer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 优先队列里面的元素：10</span></span><br><span class="line"><span class="comment">         * 优先队列里面的元素：23</span></span><br><span class="line"><span class="comment">         * 优先队列里面的元素：24</span></span><br><span class="line"><span class="comment">         * 优先队列里面的元素：26</span></span><br><span class="line"><span class="comment">         * 优先队列里面的元素：46</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> (!minQueue.isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;优先队列里面的元素：&quot;</span>+minQueue.poll());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 堆存储在数组中的结构为：</span></span><br><span class="line"><span class="comment">         * 堆在数组为：0</span></span><br><span class="line"><span class="comment">         * 堆在数组为：10</span></span><br><span class="line"><span class="comment">         * 堆在数组为：23</span></span><br><span class="line"><span class="comment">         * 堆在数组为：26</span></span><br><span class="line"><span class="comment">         * 堆在数组为：46</span></span><br><span class="line"><span class="comment">         * 堆在数组为：24</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : min) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;堆在数组为：&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">        in.nextLine();</span><br><span class="line">        <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 接下来的m行，需要分别对每一行进行判断</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> in.nextLine();</span><br><span class="line">            String[] strings = str.split(<span class="string">&quot;\\s&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (str.contains(<span class="string">&quot;is the root&quot;</span>))&#123;</span><br><span class="line">                <span class="comment">// 判断是不是头节点</span></span><br><span class="line">                <span class="keyword">if</span> (min[<span class="number">1</span>] == Integer.parseInt(strings[<span class="number">0</span>]))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;F&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (str.contains(<span class="string">&quot;are siblings&quot;</span>))&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> Integer.parseInt(strings[<span class="number">0</span>]);</span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> Integer.parseInt(strings[<span class="number">2</span>]);</span><br><span class="line">                <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n+<span class="number">1</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (min[i] == x)&#123;</span><br><span class="line">                        a = i;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (min[i] == y)&#123;</span><br><span class="line">                        b = i;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(a/<span class="number">2</span> == b/<span class="number">2</span> ? <span class="string">&quot;T&quot;</span> : <span class="string">&quot;F&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (str.contains(<span class="string">&quot;is the parent of&quot;</span>))&#123;</span><br><span class="line">                <span class="comment">// 判断是不是父节点  -- 判断x是y的父节点</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> Integer.parseInt(strings[<span class="number">0</span>]);</span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> Integer.parseInt(strings[<span class="number">5</span>]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n+<span class="number">1</span> ; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (min[i] == y)&#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> i / <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span> (min[f] == x)&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;F&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> Integer.parseInt(strings[<span class="number">0</span>]);</span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> Integer.parseInt(strings[<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n+<span class="number">1</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (min[i] == x)&#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> i / <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span> (min[f] == y)&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;F&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="3-Java读取文件，暴力分割矩阵"><a href="#3-Java读取文件，暴力分割矩阵" class="headerlink" title="3. Java读取文件，暴力分割矩阵"></a>3. <code>Java</code>读取文件，暴力分割矩阵</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;D:\\developer_tools\\idea\\java_code\\PTA\\src\\蓝桥杯\\day5\\data.txt&quot;</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(path));</span><br><span class="line">        <span class="type">int</span>[][] ints = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">30</span>][<span class="number">20</span>];</span><br><span class="line">        String line;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = in.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">            String[] strings = line.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class="line">                ints[index][i] = Integer.parseInt(strings[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line">   <span class="comment">//         按行读取，读取的每一行</span></span><br><span class="line"><span class="comment">//            System.out.println(line);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 暴力破解，求出5行5列的子矩阵的最大值</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= ints.length - <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= ints[<span class="number">0</span>].length - <span class="number">5</span>; j++) &#123;</span><br><span class="line">                <span class="comment">// 执行5次，从i 到后面5行</span></span><br><span class="line">                <span class="comment">// 从j 到后面 5 行</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">temp</span>  <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">5</span>; k++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>; l &lt; <span class="number">5</span>; l++) &#123;</span><br><span class="line">                        temp += ints[k+i][l+j];</span><br><span class="line">                        System.out.print(ints[k+i][l+j] +<span class="string">&quot; &quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println();</span><br><span class="line">                &#125;</span><br><span class="line">                res = Math.max(res , temp);</span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span>+i + <span class="string">&quot;行,第&quot;</span> + j+<span class="string">&quot;列，构造结束&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="4-Java算法模板"><a href="#4-Java算法模板" class="headerlink" title="4. Java算法模板"></a>4. Java算法模板</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求最大公约数模板</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b )</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a % b;</span><br><span class="line">        <span class="keyword">while</span> (c != <span class="number">0</span>)&#123;</span><br><span class="line">            a = b;</span><br><span class="line">            b = c;</span><br><span class="line">            c = a % b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// 求最小公倍数模板</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">findLCM</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b / gcd(a , b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分解质因数模板 -- 将一个数分解成诺干质数相乘</span></span><br><span class="line"><span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">List</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span> ; i &lt;= n ; i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(n % i == <span class="number">0</span>)&#123;</span><br><span class="line">            res.add(i);</span><br><span class="line">            n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 转化指定格式</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">factorization</span><span class="params">(<span class="type">int</span> n )</span> &#123;</span><br><span class="line">		System.out.print(n+<span class="string">&quot;=&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span> ; i &lt;= n ; i++) &#123;</span><br><span class="line">			<span class="keyword">while</span>(n % i == <span class="number">0</span>) &#123; <span class="comment">// 表示当前的i可以被n整除，是他的倍数</span></span><br><span class="line">				System.out.print(i);</span><br><span class="line">				n /= i;</span><br><span class="line">				<span class="keyword">if</span>(n != <span class="number">1</span>) &#123;  <span class="comment">// 这个地方表示目前n不是最后一个</span></span><br><span class="line">					<span class="comment">// 表示不是最后一个</span></span><br><span class="line">					System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断一个数是不是质数模板</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">f1</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(num &lt;= <span class="number">1</span>) &#123;    <span class="comment">// 小于等于1的都不是质数</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span> ; i &lt;= Math.sqrt(num) ; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;  <span class="comment">// 表示存在了其他因数，肯定不是质数，返回即可</span></span><br><span class="line">				<span class="comment">// 质数定义是：只存在1或者他本身两个因数的数字，才属于质数</span></span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 快速幂</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">double</span> <span class="title function_">f2</span><span class="params">(<span class="type">int</span> x , <span class="type">int</span> y )</span> &#123;</span><br><span class="line">		<span class="type">double</span> <span class="variable">res</span>  <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (y != <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(y % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">				res *= x;</span><br><span class="line">			&#125;</span><br><span class="line">			y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">			x *= x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="5-回溯之切割问题"><a href="#5-回溯之切割问题" class="headerlink" title="5. 回溯之切割问题"></a>5. 回溯之切割问题</h3><p>问题1 ： 力扣<a class="link"   href="https://leetcode.cn/problems/palindrome-partitioning/" >131. 分割回文串 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">代码如下：</span><br><span class="line">	List&lt;List&lt;String&gt;&gt; res1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">partition</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span> || s == <span class="literal">null</span>) <span class="keyword">return</span> res1;</span><br><span class="line">        List&lt;String&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backTracking(s , <span class="number">0</span> , path);</span><br><span class="line">        <span class="keyword">return</span> res1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backTracking</span><span class="params">(String s, <span class="type">int</span> startIndex , List path )</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (startIndex &gt;= s.length())&#123;</span><br><span class="line">            res1.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 开始进行切割</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f(s, startIndex , i ))&#123;</span><br><span class="line">                <span class="comment">// 表示这一段是回文串</span></span><br><span class="line">                path.add(s.substring(startIndex , i+<span class="number">1</span>));</span><br><span class="line">                <span class="comment">// 下一次的切割，从i当前执行的下一个开始切割哦</span></span><br><span class="line">                backTracking(s , i + <span class="number">1</span> , path);</span><br><span class="line">                <span class="comment">// 进行回溯</span></span><br><span class="line">                path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">f</span><span class="params">(String s , <span class="type">int</span> start , <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="comment">// 判断是不是回文串</span></span><br><span class="line">        <span class="keyword">while</span> (start &lt;= end)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(start) != s.charAt(end))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>问题2  力扣<a class="link"   href="https://leetcode.cn/problems/restore-ip-addresses/" >93. 复原 IP 地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">代码如下：</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">restoreIpAddresses</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() &gt; <span class="number">12</span> ) <span class="keyword">return</span> res;</span><br><span class="line">        backTrack(s , <span class="number">0</span> , <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//   使用了逗号的数量进行回溯的结束条件---- 这一点确实巧妙</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backTrack</span><span class="params">(String s, <span class="type">int</span> startIndex, <span class="type">int</span> pointNum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pointNum == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (isValid(s , startIndex , s.length() - <span class="number">1</span>))&#123;</span><br><span class="line">                res.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isValid(s , startIndex , i))&#123;</span><br><span class="line">                <span class="comment">// 表示此时是一个合法的: 需要在i后面的位置添加一个.</span></span><br><span class="line">                s = s.substring(<span class="number">0</span> , i + <span class="number">1</span> ).concat(<span class="string">&quot;.&quot;</span>).concat(s.substring(i+<span class="number">1</span>));</span><br><span class="line">                pointNum++;</span><br><span class="line">                <span class="comment">// 因为这个地方插入了一个逗号，所以下一个地方的是i+2</span></span><br><span class="line">                backTrack(s , i+<span class="number">2</span>,pointNum);</span><br><span class="line">                <span class="comment">// 下面两个地方是进行回溯的地方</span></span><br><span class="line">                pointNum--;</span><br><span class="line">                s = s.substring(<span class="number">0</span> , i+<span class="number">1</span>).concat(s.substring(i+<span class="number">2</span>));<span class="comment">//回溯</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断从start - end 两个边界都可以取到，是不是可以满足条件</span></span><br><span class="line">        <span class="keyword">if</span> (start &gt; end)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(start) == <span class="string">&#x27;0&#x27;</span> &amp;&amp; start != end)&#123;</span><br><span class="line">            <span class="comment">// 表示此时这个字符长度不为1，但是他是零开头的，不合法，返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> <span class="comment">//    下面这个使用了累乘，来计算最终结果的访问大小</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end ; i++) &#123;</span><br><span class="line">            <span class="comment">// 遇到非数字字符不合法，直接返回哦</span></span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) &gt; <span class="string">&#x27;9&#x27;</span> || s.charAt(i) &lt; <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num = num * <span class="number">10</span> + (s.charAt(i) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">255</span>)&#123;</span><br><span class="line">                <span class="comment">// 表示超过了数字的范围，直接返回哦</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 表示上面的条件都不是，此时就是一个合法的ip地址的字符串，从start到end</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="6-Java中快速读写的代码"><a href="#6-Java中快速读写的代码" class="headerlink" title="6. Java中快速读写的代码"></a>6. Java中快速读写的代码</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main_StreamTokenzier</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">StreamTokenizer</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamTokenizer</span>(<span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in)));</span><br><span class="line">    <span class="comment">// 注意点就是，每一次读取之前都要 sc.nextToken() </span></span><br><span class="line">    <span class="comment">//  然后常用的只有两个方法，读取字符串和读取数字（默认double类型）两个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        sc.nextToken();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> (<span class="type">int</span>) sc.nval;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            set.clear();</span><br><span class="line">            sc.nextToken();</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> (<span class="type">int</span>) sc.nval;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line">                sc.nextToken();</span><br><span class="line">                set.add((<span class="type">int</span>)sc.nval);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(index++ , <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(set));</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        for (Map.Entry&lt;Integer, HashSet&lt;Integer&gt;&gt; entry : map.entrySet()) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(entry.getKey()+&quot;:&quot;+entry.getValue().toString());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="7-指定字符数组长度转化为字符串"><a href="#7-指定字符数组长度转化为字符串" class="headerlink" title="7. 指定字符数组长度转化为字符串"></a>7. 指定字符数组长度转化为字符串</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// String.valueOf(char[] chars , 0 , num) 这个方法的作用就是将chars字符数组，从chars[0]开始，取长度为num个元素，转化为字符串 	   </span></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line">        System.out.println(String.valueOf(chars , <span class="number">0</span> , <span class="number">2</span>));</span><br><span class="line">        System.out.println(String.valueOf(chars , <span class="number">0</span> , <span class="number">1</span>));</span><br><span class="line">        System.out.println(String.valueOf(chars , <span class="number">0</span> , <span class="number">3</span>));</span><br><span class="line">        System.out.println(String.valueOf(chars , <span class="number">0</span> , <span class="number">5</span>));</span><br></pre></td></tr></table></figure></div>

<h3 id="8-KMP算法模板"><a href="#8-KMP算法模板" class="headerlink" title="8. KMP算法模板"></a>8. KMP算法模板</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main1</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 下面演示KMP算法 : 在s1中找到s2字符串首次出现的位置</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;zhuzhuzhuhehehezhuhezhuhe&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;zhuhe&quot;</span>;</span><br><span class="line">		System.out.println(f_KMP(s1, s2));  <span class="comment">// 6</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f_KMP</span><span class="params">(String s1 , String s2)</span> &#123;</span><br><span class="line">		<span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[s2.length()];</span><br><span class="line">		getNext(s2 , next);</span><br><span class="line"><span class="comment">//		System.out.println(Arrays.toString(next));</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s1.length(); i++) &#123;</span><br><span class="line">			<span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s1.charAt(i) != s2.charAt(j)) &#123;</span><br><span class="line">				j = next[j - <span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (s1.charAt(i) == s2.charAt(j)) &#123;</span><br><span class="line">				j++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (j == s2.length()) &#123;</span><br><span class="line">				<span class="comment">// 这个地方表示s2已经全部匹配上了:返回下标即可</span></span><br><span class="line">				<span class="keyword">return</span> i - s2.length() + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 匹配不上返回-1</span></span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 求next数组，采用不减1的操作</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getNext</span><span class="params">(String s , <span class="type">int</span>[] next)</span> &#123;</span><br><span class="line">		next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> ; i &lt; next.length ; i++) &#123;</span><br><span class="line">			<span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; s.charAt(i) != s.charAt(j)) &#123;</span><br><span class="line">				<span class="comment">// 如果找到不相同的，就看他的前一个</span></span><br><span class="line">				j = next[j - <span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(s.charAt(i) == s.charAt(j)) &#123;</span><br><span class="line">				j++;</span><br><span class="line">			&#125;</span><br><span class="line">			next[i] = j;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="9-Java中大数的基本使用"><a href="#9-Java中大数的基本使用" class="headerlink" title="9. Java中大数的基本使用"></a>9. Java中大数的基本使用</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加减乘除取模运算</span></span><br><span class="line">System.out.println(BigInteger.valueOf(<span class="number">3</span>).add(BigInteger.valueOf(<span class="number">2</span>)));</span><br><span class="line">System.out.println(BigInteger.valueOf(<span class="number">3</span>).subtract(BigInteger.valueOf(<span class="number">2</span>)));</span><br><span class="line">System.out.println(BigInteger.valueOf(<span class="number">3</span>).multiply(BigInteger.valueOf(<span class="number">2</span>)));</span><br><span class="line">System.out.println(BigInteger.valueOf(<span class="number">3</span>).divide(BigInteger.valueOf(<span class="number">3</span>)));</span><br><span class="line">System.out.println(BigInteger.valueOf(<span class="number">14</span>).mod(BigInteger.valueOf(<span class="number">3</span>)));</span><br><span class="line"><span class="comment">// 案例--大数的阶乘</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">res</span> <span class="operator">=</span> BigInteger.ONE;	 </span><br><span class="line">Scanner in=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"> <span class="comment">// 计算n的阶乘的方法     </span></span><br><span class="line"><span class="type">int</span> n=in.nextInt();</span><br><span class="line"><span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">	res = res.multiply(BigInteger.valueOf(n));</span><br><span class="line">	n--;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(res);</span><br><span class="line"><span class="comment">// 进制转化内置方法</span></span><br><span class="line"><span class="comment">// 将一个数转化为2进制，8进制，16进制</span></span><br><span class="line">System.out.println(Integer.toString(<span class="number">255</span> , <span class="number">2</span>));</span><br><span class="line">System.out.println(Integer.toString(<span class="number">255</span> , <span class="number">8</span>));</span><br><span class="line">System.out.println(Integer.toString(<span class="number">255</span> , <span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将二进制，八进制 ， 16进制的字符串转化为十进制的方法</span></span><br><span class="line">System.out.println(Integer.parseInt(<span class="string">&quot;11111111&quot;</span> , <span class="number">2</span>));</span><br><span class="line">System.out.println(Integer.parseInt(<span class="string">&quot;11111111&quot;</span> , <span class="number">8</span>));</span><br><span class="line">System.out.println(Integer.parseInt(<span class="string">&quot;11111111&quot;</span> , <span class="number">16</span>));</span><br></pre></td></tr></table></figure></div>

<h3 id="10-终要面对-Dijkstra算法"><a href="#10-终要面对-Dijkstra算法" class="headerlink" title="10 终要面对-Dijkstra算法"></a>10 终要面对-Dijkstra算法</h3><hr>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">必要学会版 V1.0</span><br></pre></td></tr></table></figure></div>

<p>GitHub源代码: <a class="link"   href="https://github.com/yuanjiejiahui/Dijkstra" >https://github.com/yuanjiejiahui/Dijkstra <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ol>
<li>算法常用于处理单源出发到其他所有节点的最短路径问题，适用于不含有负权重的有向和无向图</li>
<li>算法采用贪心策略，具体代码借助堆来优化算法</li>
</ol>
<p><a class="link"   href="https://leetcode.cn/problems/network-delay-time/description/" >力扣链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://acking-you.gitee.io/posts/dijkstra%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF%E8%AE%B2%E8%A7%A3/" >相关博文 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">networkDelayTime</span><span class="params">(<span class="type">int</span>[][] times, <span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line"> 	    List&lt;<span class="type">int</span>[]&gt;[] g = <span class="keyword">new</span> <span class="title class_">List</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            g[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 构建图，使用list数组来进行构建哦</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>[] time : times)&#123;</span><br><span class="line">            <span class="comment">// 因为times数组中的下标从1开始的哦</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> time[<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> time[<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> time[<span class="number">2</span>];</span><br><span class="line">            g[u].add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;v , w&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INF</span> <span class="operator">=</span> Integer.MAX_VALUE / <span class="number">2</span>; <span class="comment">// 初始化dist数组需要使用哦</span></span><br><span class="line">        <span class="comment">// 一共n个节点哦</span></span><br><span class="line">        <span class="type">int</span>[] dist = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(dist , INF);</span><br><span class="line">        dist[k - <span class="number">1</span>] = <span class="number">0</span>; <span class="comment">// 表示从当前节点到当前节点的最短路径为0，其他都为无限远</span></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a , b) -&gt; a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">        pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123; <span class="number">0</span> , k -  <span class="number">1</span>&#125;); <span class="comment">//小顶堆，根据数组的第一个元素进行排序，用来记录从出发顶点，到达他所能到达的其他所有顶点的集合</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!pq.isEmpty())&#123;</span><br><span class="line">            <span class="comment">// 每一次处理距离出发顶点最近的顶点哦</span></span><br><span class="line">            <span class="type">int</span>[] p = pq.poll();</span><br><span class="line">            <span class="type">int</span> <span class="variable">currDist</span> <span class="operator">=</span> p[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> p[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (dist[x] &lt; currDist)&#123;  <span class="comment">// 表示此时不用更新dist[x]了</span></span><br><span class="line">                <span class="comment">// 表示此时dist[y] ，到达y的距离已经是最小值了，不需要进行处理</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 然后开始处理: g[y] 得到所有从y出发的顶点，能到达的下一个顶点，和他们的距离哦</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span>[] e : g[x])&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> e[<span class="number">0</span>];<span class="comment">// x到达的下一个顶点y</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> dist[x] + e[<span class="number">1</span>];  <span class="comment">// 经过x顶点到达y的路径距离</span></span><br><span class="line"><span class="comment">// 经过x和不经过x的两端距离进行比较，取出最小值即可</span></span><br><span class="line">                <span class="keyword">if</span> (d &lt; dist[y])&#123;  </span><br><span class="line">                    dist[y] = d;</span><br><span class="line">                    pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;d , y&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res = Math.max(res , dist[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res == INF ? -<span class="number">1</span> :res ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="11-多次见面-并查集"><a href="#11-多次见面-并查集" class="headerlink" title="11 多次见面-并查集"></a>11 多次见面-并查集</h3><p><a class="link"   href="https://blog.csdn.net/haduwi/article/details/121350586" >附相关博文1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">我是不想见你的，奈何多次要见</span><br></pre></td></tr></table></figure></div>

<ol>
<li>题单1-<a class="link"   href="https://leetcode.cn/problems/find-if-path-exists-in-graph/" >寻找图中是否存在路径 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validPath</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges, <span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(source == destination) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">UF</span> <span class="variable">uf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UF</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">            uf.union(edge[<span class="number">0</span>] , edge[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 总结： 并且集可以用来判断连通问题</span></span><br><span class="line">        <span class="keyword">return</span> uf.connected(source , destination);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并查集</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UF</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] parent;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] sz; <span class="comment">// 存储每个根节点所在组的数量个数</span></span><br><span class="line">    <span class="type">int</span> count ;  <span class="comment">// 记录分组个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UF</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.count = n;</span><br><span class="line">        <span class="built_in">this</span>.parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.sz = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            sz[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connected</span><span class="params">(<span class="type">int</span> p , <span class="type">int</span> q)</span>&#123;</span><br><span class="line">        <span class="comment">// 判断pq是否在同一个组内</span></span><br><span class="line">        <span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找p的父节点</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (p == parent[p])&#123;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">            p = parent[p];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p , <span class="type">int</span> q)</span>&#123;</span><br><span class="line">        <span class="comment">// 将这两个数组进行在一个组里面</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pRoot</span> <span class="operator">=</span> find(p);</span><br><span class="line">        <span class="type">int</span> <span class="variable">qRoot</span> <span class="operator">=</span> find(q);</span><br><span class="line">        <span class="keyword">if</span> (pRoot == qRoot) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 现在不能简单的进行合并</span></span><br><span class="line"><span class="comment">//        parent[pRoot] = qRoot;</span></span><br><span class="line">        <span class="keyword">if</span> (sz[pRoot] &lt; sz[qRoot])&#123;</span><br><span class="line">            <span class="comment">// 将较小的合并到较大的上面</span></span><br><span class="line">            parent[pRoot] = qRoot;</span><br><span class="line">            sz[qRoot] += sz[pRoot];</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 此时qRoot较小，将较小的合并到大的上面</span></span><br><span class="line">            parent[qRoot] = pRoot;</span><br><span class="line">            sz[pRoot] += sz[qRoot];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//分组数量减减</span></span><br><span class="line">        <span class="built_in">this</span>.count--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>题单2-<a class="link"   href="https://leetcode.cn/problems/number-of-provinces/" >547. 省份数量 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findCircleNum</span><span class="params">(<span class="type">int</span>[][] isConnected)</span> &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> isConnected.length;</span><br><span class="line">        <span class="type">UF</span> <span class="variable">uf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UF</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="comment">// 表示直接连通哦</span></span><br><span class="line">                <span class="keyword">if</span> (isConnected[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    uf.union(i , j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 省份的数量，其实就是最后的分组数量</span></span><br><span class="line">        <span class="keyword">return</span> uf.count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 并查集</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UF</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validPath</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges, <span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(source == destination) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">UF</span> <span class="variable">uf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UF</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">            uf.union(edge[<span class="number">0</span>] , edge[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connected(source , destination);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] parent;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] sz; <span class="comment">// 存储每个根节点所在组的数量个数</span></span><br><span class="line">    <span class="type">int</span> count ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UF</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.count = n;</span><br><span class="line">        <span class="built_in">this</span>.parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.sz = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            sz[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connected</span><span class="params">(<span class="type">int</span> p , <span class="type">int</span> q)</span>&#123;</span><br><span class="line">        <span class="comment">// 判断pq是否在同一个组内</span></span><br><span class="line">        <span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找p的父节点</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (p == parent[p])&#123;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">            p = parent[p];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p , <span class="type">int</span> q)</span>&#123;</span><br><span class="line">        <span class="comment">// 将这两个数组进行在一个组里面</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pRoot</span> <span class="operator">=</span> find(p);</span><br><span class="line">        <span class="type">int</span> <span class="variable">qRoot</span> <span class="operator">=</span> find(q);</span><br><span class="line">        <span class="keyword">if</span> (pRoot == qRoot) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        parent[pRoot] = qRoot;</span></span><br><span class="line">        <span class="keyword">if</span> (sz[pRoot] &lt; sz[qRoot])&#123;</span><br><span class="line">            <span class="comment">// 将较小的合并到较大的上面</span></span><br><span class="line">            parent[pRoot] = qRoot;</span><br><span class="line">            sz[qRoot] += sz[pRoot];</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 此时qRoot较小，将较小的合并到大的上面</span></span><br><span class="line">            parent[qRoot] = pRoot;</span><br><span class="line">            sz[pRoot] += sz[qRoot];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//分组数量减减</span></span><br><span class="line">        <span class="built_in">this</span>.count--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>总结UF（并查集）模板</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UF</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] parent ;</span><br><span class="line">    <span class="type">int</span>[] rank ; <span class="comment">// 记录就是当前父节点他组内的个数</span></span><br><span class="line">    <span class="type">int</span> count ; <span class="comment">// 记录目前一共有多少个分组数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UF</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="built_in">this</span>.rank = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="built_in">this</span>.count = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 初始的情况下</span></span><br><span class="line">            parent[i] = i;</span><br><span class="line">            rank[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span>&#123;</span><br><span class="line">        <span class="comment">// 查找p节点的父节点</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (parent[p] == p)&#123;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">            p = parent[p];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connected</span><span class="params">(<span class="type">int</span> p , <span class="type">int</span> q)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pRoot</span> <span class="operator">=</span> find(p);</span><br><span class="line">        <span class="type">int</span> <span class="variable">qRoot</span> <span class="operator">=</span> find(q);</span><br><span class="line">        <span class="keyword">return</span> pRoot == qRoot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p , <span class="type">int</span> q)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pRoot</span> <span class="operator">=</span> find(p);</span><br><span class="line">        <span class="type">int</span> <span class="variable">qRoot</span> <span class="operator">=</span> find(q);</span><br><span class="line">        <span class="keyword">if</span> (pRoot == qRoot) <span class="keyword">return</span>;  <span class="comment">// 表示此时已经连通了，不需要在连通了</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 进行连通操作： 优化步骤在于，将较短的树连接到较大的树上面</span></span><br><span class="line">        <span class="keyword">if</span> (rank[pRoot] &lt; rank[qRoot])&#123;</span><br><span class="line">            parent[pRoot] = qRoot;</span><br><span class="line">            rank[qRoot] += rank[pRoot];</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            parent[qRoot] = pRoot;</span><br><span class="line">            rank[pRoot] += rank[qRoot];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 因为此时将两个分组合并到一个分组上面了，故分组数量需要减减</span></span><br><span class="line">        <span class="built_in">this</span>.count --;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>4 . <a class="link"   href="https://leetcode.cn/problems/7LpjUW/" >LCR 118. 冗余连接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Scheme"><figure class="iseeu highlight scheme"><table><tr><td class="code"><pre><span class="line">题目：在一个数中新添加了一条边，然后给你一个边的二维数组，请你求出，去掉哪一条边之后，仍然使得：剩余部分是一个有着 n 个节点的树（这一句话表示：删除一条边之后 ， n个节点仍然是连通的）。如果有多个答案，则返回数组 edges 中最后出现的边。</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码如下</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] findRedundantConnection(<span class="type">int</span>[][] edges) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> edges.length;</span><br><span class="line">    <span class="comment">//  UF类模板此处进行省略</span></span><br><span class="line">        <span class="type">UF</span> <span class="variable">uf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UF</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">            <span class="comment">// 题目中节点编号从1开始到n，故不要忘记减一</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> edge[<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> edge[<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (uf.connected(i , j) == <span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="comment">// 表示此时已经连接了</span></span><br><span class="line">                <span class="keyword">return</span> edge;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                uf.union(i , j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="12-再见深搜"><a href="#12-再见深搜" class="headerlink" title="12 再见深搜"></a>12 再见深搜</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">最优解不是使用dfs，为复习dfs，选择dfs</span><br></pre></td></tr></table></figure></div>

<p><a class="link"   href="https://leetcode.cn/problems/search-a-2d-matrix-ii/" >附上力扣题单 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span>[][] direction = &#123;&#123;<span class="number">0</span> , <span class="number">1</span>&#125; , &#123;<span class="number">1</span> , <span class="number">0</span>&#125; , &#123;<span class="number">1</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">searchMatrix</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">boolean</span>[][] flag = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        <span class="keyword">return</span> dfs(matrix,<span class="number">0</span>,<span class="number">0</span>,target , flag);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[][] matrix , <span class="type">int</span> i , <span class="type">int</span> j , <span class="type">int</span> target , <span class="type">boolean</span>[][] flag)</span>&#123;</span><br><span class="line"> <span class="comment">// 先判断索引不合法，和已经访问过的，直接返回false</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= matrix.length || j &lt; <span class="number">0</span> || j &gt;= matrix[<span class="number">0</span>].length || flag[i][j]) &#123;</span><br><span class="line">            <span class="comment">// 索引越界或已访问过，返回false</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 主要这个逻辑来进行判断，是不是存在目标值</span></span><br><span class="line">        <span class="keyword">if</span> (matrix[i][j] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        flag[i][j] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] cur : direction) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> cur[<span class="number">0</span>] + i;</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> cur[<span class="number">1</span>] + j;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果存在true，表示找到了，返回true即可</span></span><br><span class="line">            <span class="keyword">if</span> (dfs(matrix, x, y, target, flag)) &#123;</span><br><span class="line">                <span class="comment">// 如果在某个方向找到目标值，返回true</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 走到这个地方表示所有的方向都访问过了，但是没有找到，返回false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="13-龟兔赛跑算法–快慢指针的使用"><a href="#13-龟兔赛跑算法–快慢指针的使用" class="headerlink" title="13 龟兔赛跑算法–快慢指针的使用"></a>13 龟兔赛跑算法–快慢指针的使用</h3><p><a class="link"   href="https://zhuanlan.zhihu.com/p/496079620" >参考文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Sas"><figure class="iseeu highlight sas"><table><tr><td class="code"><pre><span class="line">Floyd判圈算法</span><br><span class="line">			- 解决是否存在环的问题</span><br><span class="line">			- 解决求环的入口的问题</span><br><span class="line">			- 解决求环的长度的问题</span><br></pre></td></tr></table></figure></div>

<p><a class="link"   href="https://leetcode.cn/problems/linked-list-cycle/" >141. 环形链表 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 判断是否存在环</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">     <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">     <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">     <span class="keyword">while</span>(slow != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">         fast = fast.next.next;</span><br><span class="line">         slow = slow.next;</span><br><span class="line">         <span class="keyword">if</span>(fast == slow)&#123; <span class="comment">//表示相遇了</span></span><br><span class="line">             <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>

<p><a class="link"   href="https://leetcode.cn/problems/linked-list-cycle-ii/" >142. 环形链表 II <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 求环的起点</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">res</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span> (fast == slow) &#123;</span><br><span class="line">                <span class="comment">// 此时表示存在环，并且他们相遇在环的某一位置上哦</span></span><br><span class="line">                <span class="keyword">while</span> (res != slow)&#123;</span><br><span class="line">                    res = res.next;</span><br><span class="line">                    slow = slow.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 走到这个地方表示不存在环</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>对于求环的长度问题暂未遇到。思路是：假设存在环，快慢指针第一次相遇的位置一定在环的某个位置上，然后让快指针不动，慢指针走一圈，引入一个变量计算长度，当慢指针与快指针再次相遇的时候，刚好为环的长度。</p>
<h3 id="14-Java数学类的三个方法"><a href="#14-Java数学类的三个方法" class="headerlink" title="14 Java数学类的三个方法"></a>14 <code>Java</code>数学类的三个方法</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">一定要注意，题目中要求的数据范围：是四舍五入，还是什么</span><br></pre></td></tr></table></figure></div>

<ol>
<li>**Math.ceil(double a)**：向上取整方法。返回大于或等于参数的最小整数。如果参数是正数，则返回大于或等于该参数的最小整数；如果参数是负数，则返回小于或等于该参数的最大整数。返回值类型为<code>double</code>。</li>
<li>**Math.floor(double a)**：向下取整方法。返回小于或等于参数的最大整数。如果参数是正数，则返回不大于该参数的最大整数；如果参数是负数，则返回大于或等于该参数的最小整数。返回值类型为<code>double</code>。</li>
<li>**Math.round(float a) 和 Math.round(double a)**：四舍五入方法。返回最接近参数的整数。对于<code>float</code>类型的参数，返回<code>int</code>类型的整数；对于<code>double</code>类型的参数，返回<code>long</code>类型的整数。这是标准的四舍五入操作，即如果待舍入数的小数部分大于等于0.5，则向上取整；如果小于0.5，则向下取整。</li>
</ol>
<h3 id="15-再学完美、完全二叉树"><a href="#15-再学完美、完全二叉树" class="headerlink" title="15 再学完美、完全二叉树"></a>15 再学完美、完全二叉树</h3><p><a class="link"   href="https://blog.csdn.net/lyl123_456/article/details/102494659" >相关博文1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>								<a class="link"   href="https://blog.csdn.net/weixin_52055811/article/details/129966800" >相关博文2 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ol>
<li>二叉树的性质</li>
</ol>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">（1）若二叉树的层次从0开始，则在二叉树的第i层至多有2^i个结点(i&gt;=0)。</span><br><span class="line">（2）高度为k的二叉树最多有2^(k+1) - 1个结点(k&gt;=-1)。 (空树的高度为-1)</span><br><span class="line"><span class="code">	度：结点所拥有的子树个数称为结点的度(Degree)</span></span><br><span class="line"><span class="code">	叶子（终端结点）：没有孩子的结点(也就是度为0的结点)称为叶子(Leaf)或终端结点</span></span><br><span class="line"><span class="code">（3）对任何一棵二叉树，如果其叶子结点(度为0)数为m, 度为2的结点数为n, 则m = n + 1。</span></span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>完美二叉树（满二叉树）</li>
</ol>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">一个深度为k(&gt;=-1)且有2^(k+1) - 1个结点的二叉树称为完美二叉树。 </span><br><span class="line">(注： 国内的数据结构教材大多翻译为&quot;满二叉树&quot;)。</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>完全二叉树</li>
</ol>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">完全二叉树从根结点到倒数第二层满足完美二叉树，最后一层可以不完全填充，其叶子结点都靠左对齐。</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li>完满二叉树</li>
</ol>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">所有非叶子结点的度都是2。（只要你有孩子，你就必然是有两个孩子。）</span><br></pre></td></tr></table></figure></div>

<ol start="5">
<li>完满(Full)二叉树 vs 完全(Complete)二叉树 vs 完美(Perfect)二叉树</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img-blog.csdnimg.cn/20191011090955281.png"
                     
                ></p>
<p><a class="link"   href="https://pintia.cn/problem-sets/1779778307878768640/exam/problems/1779778385079140362?type=7&page=0" >题目 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码如下</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n , index = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] nums , res;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        n = in.nextInt();</span><br><span class="line">        nums = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        res = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            nums[i] = in.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">1</span>);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">            ans.append(res[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ans.toString().trim());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; n)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 然后模拟后序遍历的顺序</span></span><br><span class="line">        dfs(i * <span class="number">2</span>); <span class="comment">// 左</span></span><br><span class="line">        dfs(i * <span class="number">2</span> + <span class="number">1</span>); <span class="comment">// 右</span></span><br><span class="line">        <span class="comment">// 然后处理当前节点</span></span><br><span class="line">        res[i] = nums[index++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="16-HashMap重写排序"><a href="#16-HashMap重写排序" class="headerlink" title="16 HashMap重写排序"></a>16 HashMap重写排序</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HashMap 根据value进行排序</span></span><br><span class="line"><span class="comment">// 举例： 首先按照value进行从大到小的方式排序，然后如果value相同，则按照key从小到大排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main_</span>测试 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;b&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;a&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;c&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;d&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = hashMap.entrySet();</span><br><span class="line">        <span class="comment">// 转换为列表</span></span><br><span class="line">        List&lt;Map.Entry&lt;String, Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(hashMap.entrySet());</span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        list.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Map.Entry&lt;String, Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Map.Entry&lt;String, Integer&gt; o1, Map.Entry&lt;String, Integer&gt; o2)</span> &#123;</span><br><span class="line">                <span class="comment">// 先比较value，如果value相同再比较key</span></span><br><span class="line">                <span class="keyword">if</span> (o2.getValue() - o1.getValue() != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> o2.getValue() - o1.getValue();</span><br><span class="line"><span class="comment">//                    return valueComparison;</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// value相同才按照key从小到大的方式进行排序</span></span><br><span class="line">                    <span class="keyword">return</span> o1.getKey().compareTo(o2.getKey()); <span class="comment">// 从小到大排序</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 输出排序后的结果</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : list) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Key = &quot;</span> + entry.getKey() + <span class="string">&quot;, Value = &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-f922496ecd3ef9eec758cb0767f5725d_720w.webp"
                     
                ></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>Java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>天梯赛总结</title>
    <url>/2024/04/20/%E5%A4%A9%E6%A2%AF%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<ul>
<li>刚打完天梯赛，先来安慰一下自己，结果不重要，享受过程即可</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">总结一下：</span><br><span class="line">	①基础不够牢靠，一百分的基础题，扣了13分，语文还需要加强理解</span><br><span class="line">	②心态不够好，比赛期间走神了，同时虽然外部环境干扰很多，但自己的心态还需要练</span><br><span class="line">	③进阶题目写的不足，一道鸭蛋，导致肯定与国三无缘了</span><br><span class="line">唉，唉</span><br><span class="line">距离国三还有20分的差距，同时写题还是太慢</span><br><span class="line">加油吧，加油吧</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>比赛</category>
      </categories>
      <tags>
        <tag>杂文</tag>
        <tag>比赛</tag>
        <tag>PTA</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark SQL</title>
    <url>/2024/04/15/Spark-SQL/</url>
    <content><![CDATA[<h2 id="Spark-SQL"><a href="#Spark-SQL" class="headerlink" title="Spark SQL"></a>Spark SQL</h2><h3 id="1-dataframe类型的详解"><a href="#1-dataframe类型的详解" class="headerlink" title="1. dataframe类型的详解"></a>1. dataframe类型的详解</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/v2-3d4646adbdc8dffdbdf5e4d5471d0065_r.jpg"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-9973137e99ffcba2e005275e7ccee435_720w.webp"
                     
                ></p>
<h3 id="2-dataframe的创建"><a href="#2-dataframe的创建" class="headerlink" title="2. dataframe的创建"></a>2. dataframe的创建</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-896a75d1c541fa7ea3e48ec796a223a2_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-d2bde66b53464be453bc0146b41e6c36_720w.webp"
                     
                ></p>
<h3 id="3-dataframe的使用"><a href="#3-dataframe的使用" class="headerlink" title="3. dataframe的使用"></a>3. dataframe的使用</h3><h4 id="3-1-使用df中的方法进行操作（dsl方法-—-df提供）"><a href="#3-1-使用df中的方法进行操作（dsl方法-—-df提供）" class="headerlink" title="3.1 使用df中的方法进行操作（dsl方法 — df提供）"></a>3.1 使用df中的方法进行操作（dsl方法 — df提供）</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">df数据的查询</span><br><span class="line"><span class="number">1.</span> 指定查询的字段数据(指定字段的字符串格式，结果会返回一个新的df，可以使用df.show()查看</span><br><span class="line">	df.select(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="number">2.</span> 指定多个字段<span class="comment">--一次查询多个字段（将字段放入列表中，注意需要使用字符串的形式）</span></span><br><span class="line">	df.select([<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>])</span><br><span class="line"><span class="number">3.</span> 直接使用df进行查询</span><br><span class="line">	df.select(df[<span class="string">&#x27;name&#x27;</span>],df[<span class="string">&#x27;age&#x27;</span>])</span><br><span class="line"><span class="number">4.</span> 展示所有数据<span class="comment">---&gt; 直接使用df.show() 即可将所有结果查询出来</span></span><br><span class="line">	df.show()   # 此时就是对所有字段进行处理</span><br><span class="line"><span class="number">5.</span> df.show(num)  可以指定展示多少条数据，默认是<span class="number">20</span>条数据，同时<span class="keyword">show</span>()方法不会返回新的df</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">df的条件过滤</span><br><span class="line"><span class="number">1.</span> df.where(<span class="string">&#x27;age &gt; 20&#x27;</span>) # 相当于将所有数据都进行过滤，返回一个新的df</span><br><span class="line"><span class="number">2.</span> df.where(<span class="string">&#x27;age &gt; 20&#x27;</span>) # 相当于将所有数据都进行过滤，返回一个新的df，并且，没有指定行</span><br><span class="line">	相当于得到年龄大于<span class="number">20</span>的全部过滤出来</span><br><span class="line"><span class="number">3.</span> 多个条件的与或非（<span class="keyword">and</span> , <span class="keyword">or</span> , ）</span><br><span class="line">	df.where(<span class="string">&#x27;age &gt;= 20 and gender = &quot;男&quot;&#x27;</span>) # 注意单双引号的嵌套使用</span><br><span class="line">	</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>（分组操作，一般结合聚合操作）的操作</span><br><span class="line"><span class="number">1.</span> df.groupby(<span class="string">&#x27;gender&#x27;</span>).<span class="built_in">sum</span>(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">	# 相当于对性别进行分组操作，同时对两个组中的年龄进行累加</span><br><span class="line">	# <span class="keyword">select</span> gender , <span class="built_in">sum</span>(<span class="string">&#x27;age&#x27;</span>) <span class="keyword">from</span> df <span class="keyword">group</span> <span class="keyword">by</span> gender</span><br><span class="line">	# 常见的聚合函数：<span class="built_in">sum</span>()，<span class="built_in">avg</span>() , <span class="built_in">min</span>() , <span class="built_in">max</span>()</span><br><span class="line"><span class="number">2.</span> 对于多个分组字段的使用，和进行查询的时候一样，使用一个列表进行</span><br><span class="line">	# 相当于先对性别进行一个分组，然后在两个性别中在对每一个科目在进行一个分组</span><br><span class="line">	df.groupby([<span class="string">&#x27;gender , cls&#x27;</span>]).<span class="built_in">avg</span>(<span class="string">&#x27;age&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">分组后的数据过滤</span><br><span class="line"><span class="number">1.</span> # 注意的点就是分组后的过滤，也不需要使用<span class="keyword">having</span>，而是同样使用<span class="keyword">where</span></span><br><span class="line">	df.groupby(<span class="string">&#x27;gender&#x27;</span>).<span class="built_in">sum</span>(<span class="string">&#x27;age&#x27;</span>).<span class="keyword">where</span>(<span class="string">&#x27;sum(age) &gt; 80&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">排序操作 orderBy()</span><br><span class="line"><span class="number">1.</span> df.orderBy(<span class="string">&#x27;age&#x27;</span>) </span><br><span class="line">	# 默认是升序排序,按照年龄进行升序排序</span><br><span class="line">	# 返回一个新的df</span><br><span class="line">	# 如果需要降序，就传入一个参数，进行降序排序</span><br><span class="line">	df.orderBy(<span class="string">&#x27;age&#x27;</span>,ascending <span class="operator">=</span> <span class="literal">False</span>)</span><br><span class="line"><span class="number">2.</span> 多字段排序</span><br><span class="line">	# 如果需要多个字段进行排序，可以使用列表</span><br><span class="line">	# 先按照age进行排序，如果年龄相同，就按照id进行从小到大进行排序</span><br><span class="line">	df.orderBy([<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line"><span class="number">3.</span> （多字段是按照一个排序规则进行操作）</span><br><span class="line">注意点就是，不能指定一个字段进行升序，一个降序。也就是说，和<span class="keyword">sql</span>里面是一样的。</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">指定返回数量 limit()</span><br><span class="line"><span class="number">1.</span> # 返回指定数量的数据</span><br><span class="line">   # 返回一个新的df</span><br><span class="line">	df.limit(<span class="number">5</span>)</span><br><span class="line">	</span><br></pre></td></tr></table></figure></div>

<h4 id="3-2-使用sql语句进行操作（sql语句—sparkSession提供）"><a href="#3-2-使用sql语句进行操作（sql语句—sparkSession提供）" class="headerlink" title="3.2 使用sql语句进行操作（sql语句—sparkSession提供）"></a>3.2 使用sql语句进行操作（sql语句—sparkSession提供）</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-8d036e7f21c29ee7acc86b9354c7b5cf_720w.webp"
                     
                ></p>
<h4 id="3-3-关联的操作"><a href="#3-3-关联的操作" class="headerlink" title="3.3 关联的操作"></a>3.3 关联的操作</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">join</span>的关联操作</span><br><span class="line"><span class="number">1.</span> 内关联 </span><br><span class="line"><span class="number">2.</span> 左关联 ： 左边的数据全部展示，如果有相同的id，右边表的数据也会展示</span><br><span class="line"><span class="number">3.</span> 右关联</span><br></pre></td></tr></table></figure></div>



<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-550a1afb4cb03613679d0e1069c26979_720w.webp"
                     
                ></p>
<h4 id="3-4-df数据的缓存和checkpoint"><a href="#3-4-df数据的缓存和checkpoint" class="headerlink" title="3.4 df数据的缓存和checkpoint"></a>3.4 df数据的缓存和checkpoint</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 缓存使用方法：</span></span><br><span class="line">	<span class="comment"># 进行缓存</span></span><br><span class="line">	df.persist()</span><br><span class="line">	<span class="comment"># 后序在进行计算时，如果计算错误就直接从缓存中读取</span></span><br><span class="line">	<span class="comment"># 缓存的级别：默认有限缓存到内存中，内存不足缓存到磁盘上</span></span><br><span class="line">    new_df = df.where(<span class="string">&#x27;id &gt; 1&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># checkpoint的作用：</span></span><br><span class="line"><span class="comment"># checkpoint的意思就是建立检查点,类似于快照,例如在spark计算里面 计算流程DAG特别长,服务器需要将整个DAG计算完成得出结果,但是如果在这很长的计算流程中突然中间算出的数据丢失了,spark又会根据RDD的依赖关系从头到尾计算一遍,这样子就很费性能,当然我们可以将中间的计算结果通过cache或者persist放到内存或者磁盘中,但是这样也不能保证数据完全不会丢失,存储的这个内存出问题了或者磁盘坏了,也会导致spark从头再根据RDD计算一遍,所以就有了checkpoint,其中checkpoint的作用就是将DAG中比较重要的中间数据做一个检查点将结果存储到一个高可用的地方(通常这个地方就是HDFS里面)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用方法 首先设置checkpoint存储的位置</span></span><br><span class="line">sc.setCheckpointDir(<span class="string">&#x27;hdfs:///spark_checkpoint&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后进行checkpoint操作:如果计算错误，就可以从hdfs中进行读取</span></span><br><span class="line">df.checkpoint()</span><br></pre></td></tr></table></figure></div>

<ul>
<li>当存在缓存和checkpoint时候，优先读取缓存中的数据，因为缓存的读写速度较快</li>
</ul>
<h4 id="3-5-df中的内置函数"><a href="#3-5-df中的内置函数" class="headerlink" title="3.5 df中的内置函数"></a>3.5 df中的内置函数</h4><ol>
<li><p>spark中的内置函数和hive中的内置函数基本一致</p>
</li>
<li><p>使用之前需要导入相应的模块</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession,functions <span class="keyword">as</span> F</span><br><span class="line"><span class="comment"># functions是sparksql中的内置函数模块，里面封装了许多内置方法</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.字符串的操作  --  拼接  -- 得到一个新的df</span></span><br><span class="line">new_df = df.select(F.concat(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>)) <span class="comment"># sql:select concat(id , name) from df</span></span><br><span class="line">new_df.show()   <span class="comment"># 展示结果，这个方法拼接结果不会有分割字符</span></span><br><span class="line"><span class="comment"># 2.字符串的拼接，并且指定分割字符的方法</span></span><br><span class="line">new_df = df.select(F.concat_ws(<span class="string">&#x27;,&#x27;</span> , <span class="string">&#x27;id&#x27;</span> , <span class="string">&#x27;name&#x27;</span>))</span><br><span class="line">new_df.show()</span><br><span class="line"><span class="comment"># 3. 字符串的截取</span></span><br><span class="line">df.select(F.substring(<span class="string">&#x27;name&#x27;</span> , <span class="number">1</span> , <span class="number">4</span>)) <span class="comment"># 表示从第一个字符开始，截取4个长度的字符</span></span><br><span class="line"><span class="comment"># 4. 字符串的切割</span></span><br><span class="line">df.select(F.split(<span class="string">&#x27;date&#x27;</span> , <span class="string">&#x27;-&#x27;</span>)) <span class="comment"># 将年份根据-进行切割，得到一个列表</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 时间操作，获取当前日期</span></span><br><span class="line">df.select(F.current_date())</span><br><span class="line"><span class="comment"># 2. 获取当前日期时间</span></span><br><span class="line">df.select(F.current_timestamp())</span><br><span class="line"><span class="comment"># 3. 获取当前的unix时间（时间戳）</span></span><br><span class="line">df.select(F.unix_timestamp())</span><br><span class="line"><span class="comment"># 4.将unix时间转化为指定格式的时间</span></span><br><span class="line">df.select(F.from_unixtime(<span class="string">&#x27;unix_t&#x27;</span> , <span class="built_in">format</span>=<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>))</span><br><span class="line"><span class="comment"># 5. 时间加减操作</span></span><br><span class="line">df.select(F.date_add(<span class="string">&#x27;date&#x27;</span> , <span class="number">1</span>)) <span class="comment"># 将字段date加一天</span></span><br><span class="line">df.select(F.date_add(<span class="string">&#x27;date&#x27;</span> , -<span class="number">1</span>)) <span class="comment"># 将字段date减一天</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内置函数（常用于多个聚合操作） ---  需要配合agg进行使用（agg里面可以使用多个内置函数）</span></span><br><span class="line">df.groupby(<span class="string">&#x27;gender&#x27;</span>).agg(F.<span class="built_in">sum</span>(<span class="string">&#x27;age&#x27;</span>) , F.avg(<span class="string">&#x27;age&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定某个字段保留两位小数</span></span><br><span class="line">df.groupby(<span class="string">&#x27;gender&#x27;</span>).agg(F.<span class="built_in">sum</span>() , F.<span class="built_in">round</span>(F.avg(<span class="string">&#x27;age&#x27;</span>) , <span class="number">2</span>))</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内置函数取别名的方法 ---  一般不使用中文的别名哦</span></span><br><span class="line"><span class="comment"># 取别名的操作，并且跟在内置函数后面</span></span><br><span class="line">df.groupby(<span class="string">&#x27;gender&#x27;</span>).agg(F.<span class="built_in">sum</span>().alias(<span class="string">&#x27;总和&#x27;</span>) , F.<span class="built_in">round</span>(F.avg(<span class="string">&#x27;age&#x27;</span>) , <span class="number">2</span>).alias(<span class="string">&#x27;平均值&#x27;</span>))</span><br></pre></td></tr></table></figure></div>



<h4 id="3-6-SparkSession的说明"><a href="#3-6-SparkSession的说明" class="headerlink" title="3.6 SparkSession的说明"></a>3.6 SparkSession的说明</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</span><br><span class="line"><span class="comment"># 生成sparksession对象</span></span><br><span class="line"><span class="comment"># 默认是采用本地模式进行计算</span></span><br><span class="line">ss = SparkSession.builder.getOrCreate()</span><br><span class="line"><span class="comment"># 也可以指定其他资源调度方式进行计算        -----&gt;master()</span></span><br><span class="line"><span class="comment"># master(&#x27;yarn&#x27;) 采用yarn</span></span><br><span class="line"><span class="comment"># master(&#x27;spark://node1:7077&#x27;) 采用standalone</span></span><br><span class="line">ss1 = SparkSession.builder.master(<span class="string">&#x27;yarn&#x27;</span>).getOrCreate()</span><br><span class="line"><span class="comment"># 也可以指定计算程序的任务名称   -----&gt;appName()</span></span><br><span class="line">ss1 = SparkSession.builder.master(<span class="string">&#x27;yarn&#x27;</span>).appName(<span class="string">&#x27;yarn_sparkSql&#x27;</span>).getOrCreate()</span><br><span class="line"><span class="comment"># 指定配置信息 		-------&gt;config()</span></span><br><span class="line">ss1 = SparkSession.builder.master(<span class="string">&#x27;yarn&#x27;</span>).config().getOrCreate()</span><br></pre></td></tr></table></figure></div>

<h3 id="4-小案例—电影数据统计分析"><a href="#4-小案例—电影数据统计分析" class="headerlink" title="4.小案例—电影数据统计分析"></a>4.小案例—电影数据统计分析</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 原数据格式，分析，以及导入原数据到hdfs中</span></span><br><span class="line"><span class="comment"># 字段： 用户id\t电影id\t评分\t时间</span></span><br><span class="line">代码流程如下：</span><br><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 生成SparkSession对象</span></span><br><span class="line">ss = SparkSession.builder.getOrCreate()</span><br><span class="line"><span class="comment"># 使用sparkcontext读取文件数据</span></span><br><span class="line">sc = ss.sparkContext</span><br><span class="line"><span class="comment"># 读取文件生成rdd数据</span></span><br><span class="line">rdd = sc.textFile(<span class="string">&#x27;hdfs:///movie&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这一步可以先进行查看一部分的数据</span></span><br><span class="line"><span class="built_in">print</span>(rdd.take(<span class="number">20</span>)) <span class="comment"># 查看20条数据</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将rdd数据转化为df数据,先将rdd转化为二位嵌套</span></span><br><span class="line">table_rdd = rdd.<span class="built_in">map</span>(</span><br><span class="line">	<span class="keyword">lambda</span> x : [<span class="built_in">int</span>(x.split(<span class="string">&#x27;\t&#x27;</span>)[<span class="number">0</span>]) , <span class="built_in">int</span>(x.split(<span class="string">&#x27;\t&#x27;</span>)[<span class="number">1</span>]) , double(x.split(<span class="string">&#x27;\t&#x27;</span>)[<span class="number">2</span>]) ,s.split(<span class="string">&#x27;\t&#x27;</span>)[<span class="number">3</span>] ] <span class="comment"># 注意时间可以使用字符串</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 定义schedule信息，指定字段名和字段类型</span></span><br><span class="line">schema_type = StructType()</span><br><span class="line">	.add(<span class="string">&#x27;userId&#x27;</span>,IntegerType())</span><br><span class="line">	.add(<span class="string">&#x27;movieId&#x27;</span>,IntegerType())</span><br><span class="line">    .add(<span class="string">&#x27;score&#x27;</span>,DoubleType())</span><br><span class="line">    .add(<span class="string">&#x27;unix_time&#x27;</span>,StringType())</span><br><span class="line"><span class="comment"># 转化为df数据</span></span><br><span class="line">df = table_rdd.toDF(schema_type)</span><br><span class="line"><span class="comment"># 查看df数据，默认20条</span></span><br><span class="line">df.show()</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.查询每个用户的平均分</span></span><br><span class="line">user_avg = df.groupBy(<span class="string">&#x27;userId&#x27;</span>).agg(F.avg(<span class="string">&#x27;score&#x27;</span>).alias(<span class="string">&#x27;avg_data&#x27;</span>))</span><br><span class="line">user_avg.show() <span class="comment"># 用户打分平均分展示</span></span><br><span class="line"><span class="comment"># 2. 查询每个电影的平均分</span></span><br><span class="line">movie_avg = df.groupBy(<span class="string">&#x27;movieId&#x27;</span>).agg(F.avg(<span class="string">&#x27;score&#x27;</span>).alias(<span class="string">&#x27;avg_data&#x27;</span>))</span><br><span class="line">	<span class="comment"># 计算结果保留两位小数</span></span><br><span class="line">movie_avg= df.groupBy(<span class="string">&#x27;movieId&#x27;</span>).agg(F.<span class="built_in">round</span>(F.avg(<span class="string">&#x27;score&#x27;</span>),<span class="number">2</span>).alias(<span class="string">&#x27;avg_data&#x27;</span>))</span><br><span class="line">movie_avg.show() <span class="comment"># 电影平均分展示</span></span><br><span class="line"><span class="comment"># 3. 查询高分电影中（评分大于3的）打分次数最多的用户，并求出此人打的平均分</span></span><br><span class="line"> <span class="number">3.1</span> : 得到不同用户打高分电影的数量 </span><br><span class="line">        df.where(<span class="string">&#x27;score &gt;3&#x27;</span>).groupBy(<span class="string">&#x27;userId&#x27;</span>)</span><br><span class="line">        .agg(F.count(<span class="string">&#x27;movieId&#x27;</span>).alias(<span class="string">&#x27;count_data&#x27;</span>))</span><br><span class="line"> <span class="number">3.2</span> ：然后根据数量进行降序排序，得到第一个就是打分次数最多的用户</span><br><span class="line">        df.where(<span class="string">&#x27;score &gt;3&#x27;</span>).groupBy(<span class="string">&#x27;userId&#x27;</span>)</span><br><span class="line">        .agg(F.count(<span class="string">&#x27;movieId&#x27;</span>).alias(<span class="string">&#x27;count_data&#x27;</span>))</span><br><span class="line">        .orderBy(<span class="string">&#x27;count_data&#x27;</span>,ascending = <span class="literal">False</span>)</span><br><span class="line"> <span class="number">3.3</span> ：first()方法，取出第一行数据</span><br><span class="line">	first()取出的是一个row对象，不在是一个df对象，不能使用show()进行展示哦</span><br><span class="line">		user_rdd = df.where(<span class="string">&#x27;score &gt;3&#x27;</span>).groupBy(<span class="string">&#x27;userId&#x27;</span>)</span><br><span class="line">        .agg(F.count(<span class="string">&#x27;movieId&#x27;</span>).alias(<span class="string">&#x27;count_data&#x27;</span>))</span><br><span class="line">        .orderBy(<span class="string">&#x27;count_data&#x27;</span>,ascending = <span class="literal">False</span>).first()</span><br><span class="line">     <span class="built_in">print</span>(user_rdd)  <span class="comment"># 直接进行打印得到一个rdd对象，我们需要的是userId</span></span><br><span class="line">     userId = user_rdd[<span class="string">&#x27;userId&#x27;</span>] <span class="comment"># 得到目标用户</span></span><br><span class="line">     <span class="built_in">print</span>(user_rdd[<span class="string">&#x27;userId&#x27;</span>])</span><br><span class="line"> <span class="number">3.4</span> ： 根据用户<span class="built_in">id</span>查找这个用户所有打分电影的平均分:</span><br><span class="line"><span class="comment"># 方法1</span></span><br><span class="line">user_movie_avg = df.groupBy(<span class="string">&#x27;userId&#x27;</span>).agg(F.avg(<span class="string">&#x27;score&#x27;</span>).alias(<span class="string">&#x27;avg_data&#x27;</span>))</span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">user_movie_avg = movie_avg.where(movie_avg[<span class="string">&#x27;userId&#x27;</span>] == userId)</span><br><span class="line"><span class="comment"># 结果展示</span></span><br><span class="line">user_movie_avg.show()</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 4. 查询每个用户的平均打分，最低打分，最高打分</span></span><br><span class="line"><span class="comment"># agg()里面可以使用多个内置函数</span></span><br><span class="line">df.groupBy(<span class="string">&#x27;userId&#x27;</span>).agg(F.avg(<span class="string">&#x27;score&#x27;</span>) , F.<span class="built_in">max</span>(<span class="string">&#x27;score&#x27;</span>) , F.<span class="built_in">min</span>(<span class="string">&#x27;score&#x27;</span>))</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 5. 查询被评分超过100次的电影的平均分，进行排名，取出Top10</span></span><br><span class="line">df.groupBy(<span class="string">&#x27;movieId&#x27;</span>)</span><br><span class="line">.agg(F.count(<span class="string">&#x27;movieId&#x27;</span>).alias(<span class="string">&#x27;count_data&#x27;</span>) , F.avg(<span class="string">&#x27;score&#x27;</span>).alias(<span class="string">&#x27;avg_data&#x27;</span>))</span><br><span class="line">.where(<span class="string">&#x27;count_data &gt; 100&#x27;</span>)</span><br><span class="line">.orderBy(<span class="string">&#x27;avg_data&#x27;</span>,ascending = <span class="literal">False</span>).limit(<span class="number">10</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="5-分区数目（了解）"><a href="#5-分区数目（了解）" class="headerlink" title="5. 分区数目（了解）"></a>5. 分区数目（了解）</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调整分区数目</span></span><br><span class="line">ss = SparkSession.builder.master(<span class="string">&#x27;yarn&#x27;</span>)</span><br><span class="line">.config(<span class="string">&#x27;spark.sql.shuffle.partitions&#x27;</span>,<span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">.getOrCreate()</span><br></pre></td></tr></table></figure></div>

<h3 id="6-sparkSession读取不同类型文件"><a href="#6-sparkSession读取不同类型文件" class="headerlink" title="6. sparkSession读取不同类型文件"></a>6. sparkSession读取不同类型文件</h3><h4 id="6-1-数据读入"><a href="#6-1-数据读入" class="headerlink" title="6.1 数据读入"></a>6.1 数据读入</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-700c483397a510330ca7de2707f25655_720w.webp"
                     
                ></p>
<p>注意在读取mysql的数据时候，需要将驱动依赖放到spark&#x2F;jars&#x2F;下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-3e8dacd73984d322bed1d8413352aaca_720w.webp"
                     
                ></p>
<h4 id="6-2-数据读出"><a href="#6-2-数据读出" class="headerlink" title="6.2 数据读出"></a>6.2 数据读出</h4><ul>
<li>将df数据写入到不同的文件下</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-c8c57fd77bc297648d1b43286fe44879_720w.webp"
                     
                ></p>
<h3 id="7-自定义函数"><a href="#7-自定义函数" class="headerlink" title="7. 自定义函数"></a>7. 自定义函数</h3><h4 id="7-1-函数分类"><a href="#7-1-函数分类" class="headerlink" title="7.1 函数分类"></a>7.1 函数分类</h4><ul>
<li>udf		一进一出	可以自定义</li>
<li>udaf      多进一出    可以自定义  需要借助pandas</li>
<li>udtf       一进多出    不能自定义</li>
</ul>
<ol>
<li>自定义udf函数步骤<ul>
<li>数据是一行一行处理（传递一行处理一行）</li>
<li>自定义udf函数也可以使用sql语句的方式进行使用哦</li>
</ul>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-57e95d180036f75c974003f974c9beae_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-325b8dae62fcf9f0dd9a18e9813812be_720w.webp"
                     
                ></p>
<ul>
<li>自定义函数也可以使用装饰器的方式进行注册</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-0dba6e23b1d01568ae72d85f5a1b758a_720w.webp"
                     
                ></p>
<ul>
<li>但这种方式不能使用SQL语句的方式进行使用</li>
</ul>
<ol start="2">
<li><p>自定义udaf函数步骤</p>
<ul>
<li>自定义udaf函数的格式</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-fec57c303f7f458e06b1d5cbc852d52e_720w.webp"
                     
                ></p>
<ul>
<li>注册方法同上</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-924a9ed6806e53131145c930ce0b023e_720w.webp"
                     
                ></p>
</li>
</ol>
<h3 id="8-pandas的学习"><a href="#8-pandas的学习" class="headerlink" title="8.pandas的学习"></a>8.pandas的学习</h3><ol>
<li><p>定义方式（两种）：</p>
<ul>
<li><p>值得注意的是pandas中的df和spark中的df不相同哦，pandas中的是单机计算资源，速度较慢</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-414651540dc98062801a1fa16f4a7a4d_720w.webp"
                     
                ></p>
</li>
</ul>
</li>
<li><p>将pandas中的df转化为spark中的df进行计算</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-c4ad6c77cf47edd6c79d6f4fd2b1478f_720w.webp"
                     
                ></p>
</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-79a388b17fb470113442687d1ce7b099_720w.webp"
                      style="zoom:80%;" 
                >
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据技术</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>数仓项目</title>
    <url>/2024/04/16/%E6%95%B0%E4%BB%93%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p><a class="link"   href="https://www.bilibili.com/video/BV1xx421D7Dk/?spm_id_from=333.1007.tianma.4-1-11.click" >脱颖而出 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="1-数据的采集"><a href="#1-数据的采集" class="headerlink" title="1. 数据的采集"></a>1. 数据的采集</h2><p>我们主要分析两种数据</p>
<ol>
<li><p>业务数据</p>
<p>简单的来说就是开发的内容中涉及的数据（站在开发者的角度来看）</p>
</li>
<li><p>行为数据</p>
<p>通过埋点收集和客户端产品交互过程中产生的数据（比如用户的点赞、收藏，评论、停留）</p>
</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">本项目收集和分析的用户行为数据主要有页面浏览信息、动作记录（商品收藏、）、曝光记录、启动记录、错误记录</span><br></pre></td></tr></table></figure></div>

<h3 id="1-1-数据同步的方式"><a href="#1-1-数据同步的方式" class="headerlink" title="1.1 数据同步的方式"></a>1.1 数据同步的方式</h3><ol>
<li>全量数据同步（DataX）</li>
<li>增量数据同步（Maxwell）</li>
</ol>
<p><a class="link"   href="https://blog.csdn.net/Morse_Chen/article/details/135418623" >Flume <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="1-2-数据流转到kafka"><a href="#1-2-数据流转到kafka" class="headerlink" title="1.2 数据流转到kafka"></a>1.2 数据流转到kafka</h3><ul>
<li><p>主要是为了进行实时（数据的处理以毫秒为单位）的处理</p>
</li>
<li><p>什么样的数据需要流转到kafka呢？（增量数据）</p>
</li>
</ul>
<ol>
<li>Maxwell</li>
</ol>
<p><a class="link"   href="https://blog.csdn.net/cxl_shelly/article/details/122132124?ops_request_misc=&request_id=&biz_id=102&utm_term=Maxwell%E6%95%99%E7%A8%8B&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-122132124.nonecase&spm=1018.2226.3001.4187" >博文 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://maxwells-daemon.io/quickstart/" >官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ol start="2">
<li>Maxwell ,  mysql的实现原理</li>
</ol>
<ul>
<li><p>主从复制</p>
</li>
<li><p>读写分离</p>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql的数据放在文件中、从文件中查询速度肯定很慢，所有mysql把经常查询的一部分1内容放到内存中，走内存进行查询，速率肯定快。而内存中也分几部分，有写缓存、和读缓存，当进行查询的时候，优先从写缓存中进行查询、查不到在从读缓存中进行查询。（此时用户新增的一个流程是，先将新增的数据写入写缓存中，达到一定的阈值之后写入文件，但此时出现一个问题，假如在向写缓存中的时候服务器突然挂掉、缓存中的数据就会丢失，这个时候就出现了数据丢失的问题）解决问题的方法：在写入缓存中先顺写到一个文件中、然后在向缓存中进行写入即可（注意：mysql在存储的时候是随机读写，效率不高，先写入一个文件，再写入缓存中是顺写，效率高）所以提高mysql的效率的一种方式就是使用更好的磁盘。同时还可以使用集群，而使用集群大致过程就是。向主节点进行写入，主节点将数据同步给集群中的其他节点（从节点），进行查询的时候只从从节点就行查询。这样保证了每台服务器职能比较单一，效率更好。而从节点进行数据同步的方式就是读取我们刚刚顺写的日志就可以保证从节点的数据同步了。</span><br><span class="line">而maxwell的实现就是将自己伪装成从节点，读取顺写日志（binlog），将增量数据进行同步</span><br></pre></td></tr></table></figure></div>

<h3 id="1-3-两种数据同步的方式"><a href="#1-3-两种数据同步的方式" class="headerlink" title="1.3 两种数据同步的方式"></a>1.3 两种数据同步的方式</h3><ol>
<li>全量数据–也可以使用maxwell进行同步</li>
<li>增量数据-使用maxwell进行同步</li>
</ol>
<h3 id="1-4-hive分区的目的"><a href="#1-4-hive分区的目的" class="headerlink" title="1.4 hive分区的目的"></a>1.4 hive分区的目的</h3><ul>
<li>提高查询效率  –  假如根据首字母进行分区，查找张三，只需要查找z开头的文件夹即可</li>
<li>一般分区按照天来进行统计</li>
</ul>
<h3 id="1-5-业务数据采集-零点漂移问题"><a href="#1-5-业务数据采集-零点漂移问题" class="headerlink" title="1.5 业务数据采集-零点漂移问题"></a>1.5 业务数据采集-零点漂移问题</h3><p>出现在：将kafka中的数据通过flume同步给hdfs，然后给hive的过程中</p>
<p><a class="link"   href="https://blog.csdn.net/zznanyou/article/details/120583023" >相关解决方法1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用拦截器进行解决：</span><br><span class="line">	- 作用1 判断json格式的数据（body中的数据）有否有效（采集的日志数据是json格式，要保证传输过去的格式正确）</span><br><span class="line">	- 作用2 解决零点漂移问题-修改header中的时间戳 </span><br></pre></td></tr></table></figure></div>

<h3 id="1-6-全量数据同步-DataX"><a href="#1-6-全量数据同步-DataX" class="headerlink" title="1.6 全量数据同步-DataX"></a>1.6 全量数据同步-DataX</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-7d18a1288deaa9eacd864705025c3ade_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-2f7c72d6538b2a3bbda308f274605ba0_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-b76a8d9043c6c8a80ef6028c1b643b2c_720w.webp"
                     
                ></p>
<h4 id="1-6-1-DataX使用案例"><a href="#1-6-1-DataX使用案例" class="headerlink" title="1.6.1 DataX使用案例"></a>1.6.1 DataX使用案例</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-8c5e80fa10193830a70dc3acaa80f8c2_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-a34faded91918e000cd0d280957f5544_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-d6326aeeae1aa6809f379dcf5c840f6e_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-278544255d4af8be5175e6f50e430df0_720w.webp"
                     
                ></p>
<h2 id="2-数仓基础"><a href="#2-数仓基础" class="headerlink" title="2. 数仓基础"></a>2. 数仓基础</h2><h3 id="2-1-数据仓库和数据库的区别"><a href="#2-1-数据仓库和数据库的区别" class="headerlink" title="2.1 数据仓库和数据库的区别"></a>2.1 数据仓库和数据库的区别</h3><p>一：概念上来对别</p>
<ol>
<li>数据仓库的数据，进行加工，然后对外提供服务</li>
<li>数据库主要在于存储，仓库主要在于进行打工，计算</li>
</ol>
<p>二：数据来源对比</p>
<ol>
<li>数据库的数据主要是企业中基础核心的业务数据</li>
<li>数据仓库的数据有部分是来自于数据库中</li>
</ol>
<p>三：数据存储进行区分</p>
<ol>
<li>数据库核心在于查找业务数据</li>
<li>数据仓库核心在于统计分析数据</li>
</ol>
<p>四：数据价值进行区分</p>
<ol>
<li>数据仓库：将统计分析结果为企业的经营决策提供数据支撑</li>
</ol>
<h3 id="2-2-数据仓库内部结构-常见分层"><a href="#2-2-数据仓库内部结构-常见分层" class="headerlink" title="2.2 数据仓库内部结构-常见分层"></a>2.2 数据仓库内部结构-常见分层</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-c5ba09937d828e5fc80619ddb7a5b5b3_720w.webp"
                     
                ></p>
<h4 id="2-2-1-每层具体分析"><a href="#2-2-1-每层具体分析" class="headerlink" title="2.2.1 每层具体分析"></a>2.2.1 每层具体分析</h4><ol>
<li>数据源：对接日志服务器和业务数据库</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-9e179a651e31c0976786f772445264ba_720w.webp"
                     
                ></p>
<ol start="2">
<li>加工数据：对ODS层的数据进行加工处理，为后面的统计分析做准备</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-30d02e3c5f610a10333b10c199a793fb_720w.webp"
                     
                ></p>
<ol start="3">
<li>统计数据</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-d8b33ca830a1d3301b38ef3ee0017c4a_720w.webp"
                     
                ></p>
<ol start="4">
<li>分析数据</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-564b30bbc616afd49fc78b1ff4dc4ff7_720w.webp"
                     
                ></p>
<ol start="5">
<li>共通层</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-f8a516576cb7a2d781646024ae254e44_720w.webp"
                     
                ></p>
<ol start="6">
<li>任务调度器</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-bb891468318470c9f5d1b2f27dfec97f_720w.webp"
                     
                ></p>
<h3 id="2-3-数仓项目学习重点"><a href="#2-3-数仓项目学习重点" class="headerlink" title="2.3 数仓项目学习重点"></a>2.3 数仓项目学习重点</h3><ul>
<li>建表</li>
<li>Sql</li>
<li>任务调度器</li>
</ul>
<ol>
<li>建表（建模）直接影响于SQL文的查询效率快慢与否</li>
</ol>
<h2 id="3-数仓建模"><a href="#3-数仓建模" class="headerlink" title="3.  数仓建模"></a>3.  数仓建模</h2><h3 id="3-1-方法论"><a href="#3-1-方法论" class="headerlink" title="3.1 方法论"></a>3.1 方法论</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. ER模型</span><br><span class="line">2. 维度模型</span><br></pre></td></tr></table></figure></div>

<h3 id="3-2-ER模型"><a href="#3-2-ER模型" class="headerlink" title="3.2 ER模型"></a>3.2 ER模型</h3><ol>
<li><p>对象关系</p>
<ol>
<li>一对多</li>
<li>多对一</li>
<li>一对一</li>
<li>多对多</li>
</ol>
</li>
<li><p>函数依赖关系</p>
<ul>
<li>完全函数依赖 ： 根据id，确定一个唯一的姓名</li>
<li>部分函数依赖 ： 只需要传入的部分字段进行处理，就可以获得唯一的姓名（部分有用）</li>
<li>间接函数依赖 ： 根据学生id，获取学生老师id，根据老师id获得老师姓名</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-fe3d4e59ca29a82f66eab22c0dfa6c30_720w.png"
                     
                ></p>
</li>
<li><p>范式理论（我们只针对前三范式进行说明-范式等级越高、数据冗余性低，但效率较低）</p>
<ol>
<li>第一范式：属性不可切割</li>
<li>第二范式：不能存在部分函数依赖</li>
<li>第三范式：不能存在传递函数依赖</li>
</ol>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-d8ae982218509cb82819fcf7be48c6fd_720w.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-387ecd6f879ddf0eaacda3f1f345a35d_720w.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-634f2e2fed9d27b2ac0b82716e32c12d_720w.png"
                     
                ></p>
<ol start="4">
<li>ER模型的优缺点</li>
</ol>
<p>ER模型不适合数仓仓库的建模操作</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-824c5eeb10e8d91bb9cd4e1a28541480_720w.png"
                     
                ></p>
<h3 id="3-3-维度模型"><a href="#3-3-维度模型" class="headerlink" title="3.3 维度模型"></a>3.3 维度模型</h3><p>核心：</p>
<ul>
<li>创建的表分为两大类：数据统计表（汇总什么样的数据）、数据分析表（从什么角度分析）</li>
<li>所谓维度就是分析数据的角度</li>
</ul>
<h2 id="4-数仓运行环境"><a href="#4-数仓运行环境" class="headerlink" title="4. 数仓运行环境"></a>4. 数仓运行环境</h2><ol>
<li><p>数仓构建流程</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-822ee7cc194f6a88953a9de848576cbe_720w.png?source=d16d100b"
                     
                ></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-155b2063a63c21c1f994b8385863b83c_720w.png"
                     
                ></p>
<ol start="2">
<li>环境配置<ol>
<li>我们使用的环境是Hive on Spark (谁在on前面，就是谁来解释sql文)</li>
</ol>
</li>
</ol>
<h2 id="5-ODS层（数据源）开发"><a href="#5-ODS层（数据源）开发" class="headerlink" title="5. ODS层（数据源）开发"></a>5. ODS层（数据源）开发</h2><ul>
<li>数据格式尽可能不变</li>
<li>压缩格式尽可能不变</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pica.zhimg.com/80/v2-3d3260497fe101a858881f8dec767c1b_720w.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-c49873d0b4f66c6e5f0d98284b4c7b19_720w.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-a9ebf2ad8126963d7a1984b41f7a658e_720w.png"
                     
                ></p>
<h4 id="5-1-Hive分区扩展"><a href="#5-1-Hive分区扩展" class="headerlink" title="5.1 Hive分区扩展"></a>5.1 Hive分区扩展</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-4bbc99cc226764a543134ae692111a4d_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-bafaaf7a9d6357b901700e87b5f1cdff_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-3b06c6c94a9fd32f0d202fefcb0300eb_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-a066040c9fb611ed3bd4aeed47c4d00e_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-6c952d08f00bc5d508d74cbd710a863d_720w.webp"
                     
                ></p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>项目</category>
      </categories>
      <tags>
        <tag>数据采集</tag>
        <tag>大数据技术</tag>
        <tag>数据仓库</tag>
        <tag>大数据实战项目</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2022/04/01/%E6%88%91%E7%9A%84%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="冬日随笔"><a href="#冬日随笔" class="headerlink" title="冬日随笔"></a>冬日随笔</h3><h4 id="小年"><a href="#小年" class="headerlink" title="小年"></a>小年</h4><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">只觉的年纪渐渐变大，一路走来，丢掉了许多东西，也放弃了很多儿时心血来潮的<span class="string">&#x27;梦想&#x27;</span>，其中一个就是成为作家；犹记得高中迷上了各种各样的小说，有雨果的，有村上春树的，还有东野圭吾的，当然也少不了鲁迅先生的，对于鲁迅先生尤其想多说两句，不仅仅是先生的文笔犀利的原因，也不仅仅是先生写小说写的有<span class="string">&#x27;趣&#x27;</span>的原因，最让我在对先生印象深刻的主要原因就是，读不懂先生写的文章，短篇小说还好，但是每次读起先生的散文时，着实令我头疼，甚至于连这篇散文的题目有几层涵义都难以明白，加之从小学便经常听起先生的大名，所以，对鲁迅先生尤其印象深刻。近日也是闲来无事，天气寒冷也懒得外出，便在家突然想写些什么，思来想去，便写下这些文字，也就算是对我已经放弃的梦想的缅怀吧。</span><br><span class="line">已然不记得，自己初中还是高中写的一篇作文，算是抒情，也算是描景，也可能是四不像。其中写道：我最喜欢四季中的冬季，冰天雪地、银装素裹的冬季。想起今年的冬季，自己还一场雪也没遇到呢，但可能是要马上过年，老天爷便实现了我的心愿，看一场雪。没错，今日小年，早醒之后，穿衣，拉开窗帘，忽然被眼前的冰天雪地、银装素裹的冬季所愣到了，然后惊喜，便不顾寒冷，打开窗，抓了一小撮窗沿上的雪，凉凉的，又赶紧用手搓了搓雪，还是那个沙沙的感觉。心中就感叹到雪没变！望向远处，村庄的高楼也好，瓦舍也罢，都被这忽然而来的雪所点缀，所覆盖，只剩下几棵光秃秃的树，没被这白雪所包裹，不过，倒也是别有一番风味。</span><br><span class="line">今日小年，吃了母亲包的饺子，东嘴八舌也吃了很多称自己心意的年货，（东嘴八舌哈哈哈，自己造的成语，就想形容自己吃了好多种）饭后心情格外愉悦，便想出门观雪，观景，想起友人，家旁边便有自己很多发小，但自己想了一下，还是决定独自去看，一来天气寒冷，马上新年，得疾却是不好;二来考虑自己，独行和同行，观雪心境总是不同。换衣，戴帽，开门，迈腿，收腿，关门，抬头一看，我的心愿仍然在下，不过小了很多，不影响出门，便在小年这天出门观雪。步行走了几十丈，竟有些喘气......</span><br></pre></td></tr></table></figure></div>

<h4 id="回忆吧，回忆吧"><a href="#回忆吧，回忆吧" class="headerlink" title="回忆吧，回忆吧"></a>回忆吧，回忆吧</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.......	</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-130d33539f8282b444835674b590b482_720w.webp"
                     
                ></p>
<h4 id="有感"><a href="#有感" class="headerlink" title="有感"></a>有感</h4><p>今天读到一段话，感觉挺有趣，便记录下来，仔细研学</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">全文如下:</span><br><span class="line">	当一个风姿绰约的女人走在街上，和她擦肩而过你会想到什么？有人想到她是一个天使，有人想到她是一个荡妇，有人会看到诱惑，有人会看到鄙夷，有人会自卑，有人会欣赏……</span><br><span class="line">女人本身没有任何变化，但不同的人却看出了截然不同的感受，没有一个人了解真实完整的她，所有人只看到了自己对她的想法、期待和判断。</span><br><span class="line">从心理学上来讲，这叫投射。</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line">	罗永浩有一段话，话糙理不糙：“妓女的眼中，这个世界上没有女人是不卖的，她们听到一个女人不卖的传闻，能理解的上限就是，是不是价格谈不拢？”</span><br><span class="line">	你怎么评价一个人，反应的其实是你自己的内心，是你对这个世界的理解和预期。你心里有什么，就会看到什么。三毛说：“你对我的百般注解，并不构成万分之一的我，却是一览无余的你。”</span><br><span class="line">很多时候，我们从未看到事物真实的本质，我们看到的只是自己的信念系统，自己对事物所贴上的标签和解释。你信念中所信奉的一切，会像手电筒一样打在别人身上。</span><br><span class="line"></span><br><span class="line">你眼中的你不是真的你，</span><br><span class="line">别人眼中的你也不是真的你，</span><br><span class="line">你眼中的别人才是真的你。</span><br><span class="line"></span><br><span class="line">	人自己看自己都是主观的，别人看你的时候是他内心的投射，而你眼中的别人才是你内心投影出来的镜子，是你的人格阴影。</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line">	怎么了解一个女人选择男人的标准？和她去看爱情电影，然后问她对男主人公的评价，她对男主人公的评价就是她对男人的评价标准。</span><br><span class="line">	借助对第三方的评价，了解一个人真实的内心世界。</span><br><span class="line">	老练的面试官会营造轻松的气氛，然后东拉西扯地闲聊，不经意间，问问你对某个人、某件事的看法，这个时候，你的防御系统松懈，回答的真实性会大大提升。用查户口的方式问，谁会真心话大冒险？</span><br><span class="line">	如果你一上班，看谁都不顺眼，张三脑袋进水了，李四脑袋被门夹了，王二麻子脑袋被驴踢了……真正的问题可能是：你的上头，投射到了别人身上。</span><br><span class="line">	你讨厌一个同事，就会给他贴上恶人的标签，面对他时，你自然特别容易动气，这其实是你刻意制造或放大了冲突。人生中<span class="number">99</span>%的烦恼都来源于人际关系，处理人际关系真正的起点，不是人和人的关系，是你自己和自己的关系。</span><br><span class="line">	网络上那么多莫名其妙的恶意攻击，其本质是当事人的生活过得不如意，混得越差，脾气越大。</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line">	心理学家波尔斯曾说：“我们以为，我们活在一个四周都是玻璃的房子，我们看到的都是全世界，其实，我们活在一个四周都是镜子的房子，我们所看到的都是自己。”</span><br><span class="line">	明白了这个投射机制之后，你就知道了，你所遇到的所有人都是你自己，这个世界的主角从来都只有你自己。只有理解自己才是一切问题的根源，你才能找到解决问题的根本方法。</span><br><span class="line">	人痛苦的根源是，总在用自己的标准去要求别人。</span><br><span class="line">	他怎么不按我说的去做？王五太蠢了！赵六不讲究！当你总在用自己的标准去要求别人时，你会发现，你就是和别人相处不来。你要改变别人，只有一个办法就是改变自己，只有你自己变得没那么多标准，没那么多框架和要求，你和任何人相处都是可以的。</span><br><span class="line">	如果你有感情方面的烦恼，送你一句话：你怎么爱自己，就是在教别人怎么爱你。你细品，这是解决感情问题的关键，别再当演唱会上的沸羊羊了。</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line">	人生的道理浓缩一下就两个字：内观。所有的圣贤书讲的都是这个道理，我是一切的根源，我的思维导致了我的选择，我的选择决定了今天的因果。</span><br><span class="line"> </span><br><span class="line">	《心经》开篇第一句就是：“观自在菩萨”；《六祖坛经》的精髓是：“心平何须持戒，身正何须坐禅”；《金刚经》的要义是：“应无所住，而生其心”；禅宗说：“明心见性，见性成佛”；王阳明龙场悟道，悟出了八个字：“吾性自足，不假外求”……</span><br><span class="line"></span><br><span class="line">	人生最大的敌人就是自己，只有把自己看清楚，才能把世界看清楚。把一切外部的事物都当自己的镜子，时刻照见自己的内心，破除执念和障碍，你才能成为更好的自己。</span><br><span class="line"></span><br><span class="line">万千法门，修心为上。</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">个人所悟、皆为所得、吾思之，想之，爱之。</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>杂文</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>杂文</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库-SQL</title>
    <url>/2024/04/10/%E6%95%B0%E6%8D%AE%E5%BA%93-SQL/</url>
    <content><![CDATA[<h3 id="测试图片上传服务器功能"><a href="#测试图片上传服务器功能" class="headerlink" title="测试图片上传服务器功能"></a>测试图片上传服务器功能</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">老身今自由。心无疚，随意度春秋</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-c67b050921ab84a8a5188cb2559fe9ad_720w.jpg"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-626d786cd1bc9423942de0f829a8ab17_720w.jpg"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-5aac35005e06df7a489195614e4b4a23_720w.jpg"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-d15d1d5889e528fa16de49eac88cab10_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-6b96910eb06b006568a6043458c22aac_720w.webp"
                     
                ></p>
<h2 id="1-爆炸函数"><a href="#1-爆炸函数" class="headerlink" title="1.爆炸函数"></a>1.爆炸函数</h2><hr>
<ol>
<li><p>使用爆炸函数可以将数组转化为<strong>一列</strong>数据</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">select</span> explode(<span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> sequence(<span class="number">1</span>,<span class="number">100</span>);  <span class="comment">-- 生成1到100，数组数据</span></span><br><span class="line"># 配合爆炸函数快速生成一列数据</span><br><span class="line"><span class="keyword">select</span> explode(sequence(<span class="number">1</span>,<span class="number">100</span>)) <span class="keyword">as</span> id  <span class="comment">-- 可以生成一列从1，到100的数组</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>快速生成表的数据</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> stack(</span><br><span class="line">	<span class="number">2</span>,   <span class="comment">-- 这个参数指定表中有几条数据</span></span><br><span class="line">	<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">23</span>,</span><br><span class="line">	<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">22</span>    <span class="comment">-- 这两行指定表的数据内容</span></span><br><span class="line">);</span><br><span class="line"># 也可以指定表中每一列的字段名称</span><br><span class="line"><span class="keyword">select</span> stack(</span><br><span class="line">	<span class="number">2</span>,   <span class="comment">-- 这个参数指定表中有几条数据</span></span><br><span class="line">	<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">23</span>,</span><br><span class="line">	<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">22</span>    <span class="comment">-- 这两行指定表的数据内容</span></span><br><span class="line">) <span class="keyword">as</span> (id , name , age);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>操作生成表的数据的方式</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-96f65907b5db27165ac8a0c35ded999d_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-978c9ada3d323e31b62dc0f86cbdd2c3_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-b0c6c4532bbdbd9733312b1611ed9875_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-f957d4006d4d9ea8491601b5248e4d97_720w.webp"
                     
                ></p>
</li>
</ol>
<h2 id="2-SparkSQL的执行引擎"><a href="#2-SparkSQL的执行引擎" class="headerlink" title="2.SparkSQL的执行引擎"></a>2.SparkSQL的执行引擎</h2><ul>
<li>解析器 ： 将sql语句转化为语法树</li>
<li>分析器 ： 语法树中被查询的字段数据类型-读取元数据声明被查询的字段类型</li>
<li>优化器 ： 将语法树进行优化<ul>
<li>谓词下推 ： 比如先进行where的过滤条件，将过滤结果在进行join操作</li>
<li>列值裁减 ： 只查询需要的字段</li>
</ul>
</li>
<li>执行器 ： 将最终语法树转化为rdd，交给spark进行最终执行</li>
</ul>
<h2 id="3-电商案例"><a href="#3-电商案例" class="headerlink" title="3. 电商案例"></a>3. 电商案例</h2><ol>
<li>订单表字段说明</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-230eab3071260efdc00c1fe81eb4c71d_720w.webp"
                     
                ></p>
<ol start="2">
<li>对原数据进行数据清洗的时候假如存在int类型和string类型的空，过滤方法为：</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-82a74de1d91f0800e369bcf00f4dc736_720w.webp"
                      style="zoom:80%;" 
                >

<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># 注意点就是对于字符串过滤的时候，不能使用<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> 因为他不是<span class="keyword">null</span>，是空字符</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">and</span> name <span class="operator">!=</span> <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-c6075985d1d94348edd19ad555c21362_720w.webp"
                     
                ></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># 然后将过滤之后的数据导入到下一层里面</span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-ee58c48091a9b74721b019bb437fa1ec_720w.webp"
                      style="zoom:80%;" 
                >

<ol start="3">
<li>app层的计算指标</li>
</ol>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="number">1.</span>销量最高的<span class="number">10</span>个国家</span><br><span class="line"><span class="keyword">select</span> Country , <span class="built_in">sum</span>(Quantity) <span class="keyword">as</span> sum_data <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> Country <span class="keyword">order</span> <span class="keyword">by</span> sum_data <span class="keyword">desc</span> limit(<span class="number">10</span>)</span><br><span class="line"># <span class="number">2.</span> 各个国家的总销售额分布情况</span><br><span class="line"><span class="keyword">select</span> Country , <span class="built_in">sum</span>(Quantity <span class="operator">*</span> Price)  <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> Country</span><br><span class="line">        <span class="comment">-- 保留小数点两位使用round() 函数</span></span><br><span class="line"><span class="keyword">select</span> Country , round(<span class="built_in">sum</span>(Quantity <span class="operator">*</span> Price) , <span class="number">2</span>)  <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> Country</span><br><span class="line"># <span class="number">3.</span> 销量最高的<span class="number">10</span>个商品</span><br><span class="line"><span class="keyword">select</span> InvoiceNo , <span class="built_in">sum</span>(Quantity) <span class="keyword">as</span> sum_data <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> InvoiceNo </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sum_data limit(<span class="number">10</span>)</span><br><span class="line"># <span class="number">4.</span> 商品描述的热门关键词Top300</span><br><span class="line"><span class="comment">-- 思路：首先将商品描述根据空格进行切割，然后得到sql里面的数组，借助爆炸函数，将数组中的数据转化为一列数组，并且重命名为word，然后在进行查询统计即可</span></span><br><span class="line"><span class="keyword">with</span> tb <span class="keyword">as</span>(</span><br><span class="line">	<span class="keyword">select</span> explode(split(Description , <span class="string">&#x27; &#x27;</span>)) <span class="keyword">as</span> word <span class="keyword">from</span> 表名 </span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> word , <span class="built_in">count</span>(word) <span class="keyword">as</span> count_data <span class="keyword">from</span> tb <span class="keyword">where</span> word <span class="operator">!=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> word </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> count_data <span class="keyword">desc</span> limit <span class="number">300</span></span><br><span class="line">	</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="number">5.</span> 退货订单数最多的<span class="number">10</span>个国家 <span class="comment">-- 求的是数量啊--使用内置函数--count()</span></span><br><span class="line"><span class="keyword">select</span> Country , <span class="built_in">count</span>(InvoiceNo)  <span class="keyword">from</span> 表名 <span class="keyword">where</span> <span class="built_in">substring</span>(InvoiceNo,<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="operator">=</span><span class="string">&#x27;C&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> Country <span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">count</span>(InvoiceNo) <span class="keyword">desc</span> limit <span class="number">10</span></span><br><span class="line"></span><br><span class="line">(答案)<span class="keyword">select</span> Country , <span class="built_in">count</span>(InvoiceNo) <span class="keyword">as</span> count_data  <span class="keyword">from</span> 表名 <span class="keyword">where</span> InvoiceNo <span class="keyword">like</span>  &quot;C%&quot; <span class="keyword">group</span> <span class="keyword">by</span> Country <span class="keyword">order</span> <span class="keyword">by</span> count_data <span class="keyword">desc</span> limit <span class="number">10</span></span><br><span class="line"># <span class="number">6.</span> 商品的平均单价和销量的关系</span><br><span class="line"><span class="keyword">select</span> StockCode round(<span class="built_in">avg</span>(price) , <span class="number">2</span>) <span class="keyword">as</span> avg_data , <span class="built_in">sum</span>(Quantity) <span class="keyword">as</span> sum_data <span class="keyword">from</span> 表名 </span><br></pre></td></tr></table></figure></div>

<h2 id="4-消息队列（MQ）"><a href="#4-消息队列（MQ）" class="headerlink" title="4. 消息队列（MQ）"></a>4. 消息队列（MQ）</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">突然有一天你会发现，你的思念不会因为长时间的不联系而消失，只会随着时间的流逝像野草般疯狂生长。</span><br></pre></td></tr></table></figure></div>



<ol>
<li>作用</li>
</ol>
<ul>
<li>进行实时计算需要</li>
<li>应用耦合  – 解耦  – 使用消息队列解耦</li>
<li>异步处理</li>
<li>限流削峰</li>
</ul>
<ol start="2">
<li>消息队列的两种模式</li>
</ol>
<ul>
<li>点对点</li>
</ul>
<p>​	</p>
<ul>
<li>发布与订阅</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据技术</tag>
        <tag>人生感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题总结</title>
    <url>/2024/04/19/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="面试题目总结"><a href="#面试题目总结" class="headerlink" title="面试题目总结"></a>面试题目总结</h2><h3 id="1-Java-算法"><a href="#1-Java-算法" class="headerlink" title="1. Java-算法"></a>1. Java-算法</h3><h4 id="1-1-运算符"><a href="#1-1-运算符" class="headerlink" title="1.1 &amp; 运算符"></a>1.1 &amp; 运算符</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="comment">// &amp;是是针对二进制的二目运算符。需要注意的是&amp;&amp;是java中判断条件之间表示“和”的标识符，&amp;是一个二目运算符，</span></span><br><span class="line"><span class="comment">// 两个二进制数值如果在同一位上都是1，则结果中该位为1，否则为0，可以认为两个都是true(1)，结果也为true(1)，比如1011 &amp; 0110 = 0010。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &amp;还有一个比较重要的地方，也是面试中经常出现的问题，即该运算符可以计算余数。我们知道四则运算中速度最慢的就是除，而取余操作更加慢，因此可以通过&amp;来快速的求两个数的余数，来看例子：</span></span><br><span class="line"><span class="comment">// 想求45和12（45和8）的余数，只要求45 &amp; 11（45 &amp; 7）</span></span><br><span class="line"><span class="keyword">public</span> ModTest&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="number">45</span> &amp; <span class="number">11</span>);</span><br><span class="line">        System.out.println(<span class="number">45</span> &amp; <span class="number">7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="2-mysql底层索引存储原理"><a href="#2-mysql底层索引存储原理" class="headerlink" title="2. mysql底层索引存储原理"></a>2. mysql底层索引存储原理</h3><h3 id="3-数据库-事务"><a href="#3-数据库-事务" class="headerlink" title="3. 数据库-事务"></a>3. 数据库-事务</h3><ul>
<li><p>事务是一组操作的集合，这组操作，要么全部执行成功，要么全部执行失败。</p>
</li>
<li><p>mysql的事务默认是自动提交，一条语句执行之后就自动提交了</p>
</li>
</ul>
<h4 id="3-1-事务的四大特性"><a href="#3-1-事务的四大特性" class="headerlink" title="3.1 事务的四大特性"></a>3.1 事务的四大特性</h4><ol>
<li>原子性</li>
<li>一致性</li>
<li>隔离性</li>
<li>持久性</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-5c18b0e980eb3c0b462cba5f0b45c31f_720w.webp"
                     
                ></p>
<h4 id="3-2-并发事务问题"><a href="#3-2-并发事务问题" class="headerlink" title="3.2 并发事务问题"></a>3.2 并发事务问题</h4><p>多个并发事务在执行的过程当中出现的问题</p>
<ol>
<li>脏读</li>
<li>不可重复读</li>
<li>幻读</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-3f68066d7a76a739a1e0ccd9cbf525c5_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-f61c1f664cfa8f0a5aef3803985d284d_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-3195f8b3caf5261c5d385766753418da_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-a80aa4738bc26c2d8b216ed16c765d9c_720w.webp"
                     
                ></p>
<h5 id="3-2-1-如何解决"><a href="#3-2-1-如何解决" class="headerlink" title="3.2.1 如何解决"></a>3.2.1 如何解决</h5><p>通过事务不同的隔离级别进行解决（级别越高数据越安全、但效率越低）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-3e661825715813c1462142b154a69ca0_720w.webp"
                     
                ></p>
<h3 id="4-数据库-存储引擎"><a href="#4-数据库-存储引擎" class="headerlink" title="4. 数据库-存储引擎"></a>4. 数据库-存储引擎</h3><h4 id="4-1-mysql的四大体系结构"><a href="#4-1-mysql的四大体系结构" class="headerlink" title="4.1 mysql的四大体系结构"></a>4.1 mysql的四大体系结构</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-8d11c93068d9ea31134c9c54cd56f893_720w.webp"
                     
                ></p>
<h4 id="4-2-mysql的存储引擎"><a href="#4-2-mysql的存储引擎" class="headerlink" title="4.2 mysql的存储引擎"></a>4.2 mysql的存储引擎</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 存储引擎是基于表的，一个数据库下的不同表，可以有不同的存储引擎</span><br><span class="line">2. mysql 5.5 之后，表的默认存储引擎是InnoDB</span><br></pre></td></tr></table></figure></div>

<ol>
<li>如何使用</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-56ad047187644ebcaa1044bec4347e14_720w.webp"
                     
                ></p>
<h4 id="4-3-存储引擎的主要特点"><a href="#4-3-存储引擎的主要特点" class="headerlink" title="4.3 存储引擎的主要特点"></a>4.3 存储引擎的主要特点</h4><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-6c4d14fc53daf0bb7c54d67db0acec6b_720w.webp"
                     
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-997639c1dc6b451ea9a7931375afa58b_720w.webp"
                     
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-7fd36a19700b2ce853bd13dabcc0add4_720w.png"
                     
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-fb2d8359f76bfae6fed2947504c8c922_720w.png"
                     
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-613645ff10d8e1f169402b85aaef6c2a_720w.png"
                     
                ></p>
</li>
</ul>
<h4 id="4-4-面试题"><a href="#4-4-面试题" class="headerlink" title="4. 4 面试题"></a>4. 4 面试题</h4><p>问InnoDB和MyISAM的区别？</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">InnoDB：支持事务、行锁、支持外键</span><br><span class="line">MyISAM: 表锁，不支持事务、不支持外键</span><br></pre></td></tr></table></figure></div>

<h4 id="4-5-存储引擎如何选择"><a href="#4-5-存储引擎如何选择" class="headerlink" title="4.5 存储引擎如何选择"></a>4.5 存储引擎如何选择</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">根据系统应用特点，选择合适的存储引擎，一般用第一个，两外两个现在一般被MongoDB、redis代替</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-dc5521f08948280368776418ab349a49_720w.png"
                     
                ></p>
<h4 id="4-6-总结"><a href="#4-6-总结" class="headerlink" title="4.6 总结"></a>4.6 总结</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/80/v2-71e0fd8768c2bec30010d3dc35099d19_720w.png"
                     
                ></p>
<h3 id="5-数据库-索引"><a href="#5-数据库-索引" class="headerlink" title="5. 数据库-索引"></a>5. 数据库-索引</h3><h4 id="5-1-索引概述"><a href="#5-1-索引概述" class="headerlink" title="5.1 索引概述"></a>5.1 索引概述</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/80/v2-e0cb42fd9940f50f2fe6e5d983553ff9_720w.png"
                     
                ></p>
<p>优缺点</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-2fcf4f7479bae0f51782b7f84a846421_720w.webp"
                     
                ></p>
<h4 id="5-2-索引结构"><a href="#5-2-索引结构" class="headerlink" title="5.2 索引结构"></a>5.2 索引结构</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-93f04ed6072173e2c5275587bb11c9e5_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-b3cbea991d04ba865aa05f013655ba8d_720w.webp"
                     
                ></p>
<ol>
<li>二叉树（二叉搜索树）和红黑树（自平衡的二叉搜索树）</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-68b767b81a0b10f40e24b310e03bdc96_720w.webp"
                     
                ></p>
<ol start="2">
<li>B树（多路平衡搜索树）</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-55a2384359a50d83dfe1cc8358203a52_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/80/v2-b02db971f6ee7d5f269c6dc102b5b275_720w.webp"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/80/v2-fefb2b8d4c9f005b6d49bb0f96f8d49f_720w.webp"
                     
                ></p>
<ol start="3">
<li>mysql中优化后的B+树</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/80/v2-1c9c01683bf9bef3255d16e275dfc0ba_720w.webp"
                     
                ></p>
]]></content>
      <categories>
        <category>算法</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>鲁迅杂文片段一</title>
    <url>/2024/04/01/%E9%B2%81%E8%BF%85%E6%9D%82%E6%96%87%E7%89%87%E6%AE%B5%E4%B8%80/</url>
    <content><![CDATA[<p>​	“中国现在的人心中，不平和愤恨的分子太多了。不平还是改造的引线，但必须先改造了自己，再改造社会，改造世界；万万不可单是不平，至于愤恨，却几乎全无用处。”“我们不要借了 ‘天下无公理，无人道’ 这些话，遮盖自暴自弃的行为，自称恨人。”  “父子之间没有什么恩，这一断语，实是招致圣人之徒面红耳赤的一大原因。他们的误点，便在长者本位与利己思想，权利思想很重，义务思想和责任心却轻。“本位应在幼者，却反在长者；置重应在将来，却反在过去。”</p>
<p>​	“穷人的孩子蓬头垢面的在街上转，阔人的孩子妖形妖势娇声娇气的在家里转。转得了，都混天黑地的在社会上转，同他们的父辈一样，或者还不如。虽然人口众多这一句化很多人可以闭了眼睛自负，然而这许多人口便只在尘土中辗转，小的时候，不把人当人，大了以后，也做不了人。”</p>
<p>​	“的确的，谁也没有发见过苍蝇们的缺点和创伤。然而，有缺点的战士终竟是战士，完美的苍蝇也终究不过是苍蝇。”</p>
]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>杂文</tag>
        <tag>鲁迅</tag>
      </tags>
  </entry>
  <entry>
    <title>比赛刷题总结</title>
    <url>/2024/04/18/%E6%AF%94%E8%B5%9B%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7a025d7ab6a6ccc08d4a1534870c392d6e78b564e8819480e597fc56115e2a4c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法</category>
        <category>比赛</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>Java</tag>
        <tag>算法</tag>
        <tag>比赛</tag>
        <tag>PTA</tag>
      </tags>
  </entry>
</search>
